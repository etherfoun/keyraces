@using keyraces.Core.Interfaces
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IRoleService RoleService

<div class="navbar-wrapper">
    <nav class="navbar">
        <div class="navbar-content">
            <div class="navbar-brand">
                <a href="/">
                    <img src="/images/logo.png" alt="KeyRaces Logo" class="logo" />
                </a>
            </div>

            <div class="navbar-links">
                <a href="/train" class="nav-link">Practice</a>
                <a href="/competitions" class="nav-link">Competitions</a>
                <a href="/leaderboard" class="nav-link">Leaderboard</a>
                <a href="/about" class="nav-link">About</a>
            </div>

            <div class="navbar-user">
                @if (!string.IsNullOrEmpty(username))
                {
                    <div class="user-profile">
                        <span class="user-info">
                            @username
                            @if (!string.IsNullOrEmpty(userId))
                            {
                                <UserRoleBadge UserId="@userId" />
                            }
                        </span>
                        <div class="dropdown-menu">
                            <a href="/profile" class="dropdown-item">Profile</a>
                            @if (isAdmin)
                            {
                                <a href="/admin" class="dropdown-item admin-link">Admin Panel</a>
                            }
                            <a href="javascript:void(0)" @onclick="HandleLogout" class="dropdown-item">Logout</a>
                        </div>
                    </div>
                }
                else
                {
                    <a href="/login" class="login-button">Login</a>
                }
            </div>
        </div>
    </nav>
</div>

<style>
    .navbar-wrapper {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 1000;
        padding: 10px 20px;
        height: 80px;
    }

    .navbar {
        background-color: #222;
        border-radius: 50px;
        padding: 0 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        max-width: 1200px;
        margin: 0 auto;
    }

    .navbar-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        height: 60px;
    }

    .navbar-brand {
        display: flex;
        align-items: center;
    }

    .logo {
        height: 40px;
        width: auto;
    }

    .navbar-links {
        display: flex;
        gap: 30px;
    }

    .nav-link {
        color: #fff;
        text-decoration: none;
        font-size: 16px;
        font-weight: 500;
        transition: color 0.3s;
    }

        .nav-link:hover {
            color: #ccc;
        }

    .navbar-user {
        position: relative;
    }

    .user-profile {
        background-color: white;
        color: #333;
        padding: 8px 16px;
        border-radius: 50px;
        font-weight: 500;
        cursor: pointer;
        position: relative;
    }

        .user-profile::after {
            content: "";
            position: absolute;
            height: 15px;
            width: 100%;
            bottom: -15px;
            left: 0;
        }

        .user-profile:hover .dropdown-menu,
        .dropdown-menu:hover {
            display: block;
        }

    .user-info {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .dropdown-menu {
        display: none;
        position: absolute;
        top: calc(100% - 5px);
        right: 0;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        padding-top: 10px;
        min-width: 150px;
        z-index: 1001;
    }

    .dropdown-item {
        display: block;
        padding: 10px 15px;
        color: #333;
        text-decoration: none;
        transition: background-color 0.3s;
    }

        .dropdown-item:hover {
            background-color: #f5f5f5;
        }

    .login-button {
        background-color: white;
        color: #333;
        padding: 8px 16px;
        border-radius: 50px;
        text-decoration: none;
        font-weight: 500;
        transition: background-color 0.3s;
    }

        .login-button:hover {
            background-color: #f5f5f5;
        }

    .role-badge {
        display: inline-block;
        font-size: 12px;
        padding: 3px 8px;
        border-radius: 12px;
        font-weight: bold;
        transition: all 0.2s ease;
    }

    .role-admin {
        background-color: #ff4500;
        color: white;
    }

    .role-moderator {
        background-color: #1e90ff;
        color: white;
    }

    .role-premium {
        background-color: #ffd700;
        color: #333;
    }

    .role-user {
        background-color: #e0e0e0;
        color: #333;
    }

    .role-badge:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .dropdown-item.admin-link {
        color: #ff4500;
        font-weight: bold;
    }

    @@media (max-width: 768px) {
        .navbar-links

    {
        display: none;
    }

    }
</style>

@code {
    private string username;
    private string userId;
    private bool isFirstRender = true;
    private bool isAdmin = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isFirstRender = false;
            await LoadUserInfoAsync();
            StateHasChanged();
        }
    }

    private async Task LoadUserInfoAsync()
    {
        try
        {
            if (JS is null)
            {
                Console.WriteLine("JS runtime is not available");
                return;
            }

            username = await JS.InvokeAsync<string>("localStorage.getItem", "user_name");
            userId = await JS.InvokeAsync<string>("localStorage.getItem", "user_id");

            if (string.IsNullOrEmpty(username))
            {
                try
                {
                    var authStatus = await JS.InvokeAsync<object>("authInterop.checkAuthStatus");

                    if (authStatus != null)
                    {
                        var authData = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(
                            System.Text.Json.JsonSerializer.Serialize(authStatus)
                        );

                        if (authData != null && authData.ContainsKey("isAuthenticated") &&
                            authData["isAuthenticated"].ToString() == "True")
                        {
                            if (authData.ContainsKey("email"))
                            {
                                username = authData["email"].ToString();
                            }
                            if (authData.ContainsKey("userId"))
                            {
                                userId = authData["userId"].ToString();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error checking auth status: {ex.Message}");
                }
            }

            if (!string.IsNullOrEmpty(userId))
            {
                // Проверяем, является ли пользователь администратором через сервис ролей
                var roles = await RoleService.GetUserRolesAsync(userId);
                isAdmin = roles.Any(r => r.Equals("Admin", StringComparison.OrdinalIgnoreCase));
            }
            else if (!string.IsNullOrEmpty(username))
            {
                // Запасной вариант, если ID пользователя недоступен
                isAdmin = IsAdminUser(username);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user info: {ex.Message}");
            username = null;
        }
    }

    private bool IsAdminUser(string email)
    {
        return email.ToLower().EndsWith("@admin.com") ||
               email.ToLower() == "admin@example.com" ||
               email.ToLower() == "admin@keyraces.com";
    }

    private async Task HandleLogout()
    {
        try
        {
            await JS.InvokeVoidAsync("authInterop.logout");
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
        }
    }
}
