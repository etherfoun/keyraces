@using keyraces.Server.Services
@inject ThemeService ThemeService
@inject IJSRuntime JS

<div class="theme-toggle" @onclick="ToggleTheme">
    @if (currentTheme == "dark")
    {
        <span class="theme-icon sun-icon">☀️</span>
    }
    else
    {
        <span class="theme-icon moon-icon">🌙</span>
    }
</div>

<style>
    .theme-toggle {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.1);
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .theme-toggle:hover {
            background-color: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }

    .theme-icon {
        font-size: 18px;
        line-height: 1;
    }

    .sun-icon {
        color: #FFD700;
    }

    .moon-icon {
        color: #A9B7C6;
    }
</style>

@code {
    private string currentTheme = "dark";
    private bool jsInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);

            try
            {
                jsInitialized = await JS.InvokeAsync<bool>("eval", "typeof window.themeInterop !== 'undefined'");

                if (!jsInitialized)
                {
                    await JS.InvokeVoidAsync("console.error", "themeInterop is not available in OnAfterRenderAsync");
                    await Task.Delay(1000);
                    jsInitialized = await JS.InvokeAsync<bool>("eval", "typeof window.themeInterop !== 'undefined'");
                }

                if (jsInitialized)
                {
                    currentTheme = await ThemeService.GetCurrentThemeAsync();
                    await JS.InvokeVoidAsync("console.log", "Initial theme loaded:", currentTheme);
                }
                else
                {
                    await JS.InvokeVoidAsync("console.error", "themeInterop is still not available after waiting");
                    currentTheme = ThemeService.DefaultTheme;
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", "Error in OnAfterRenderAsync:", ex.Message);
                currentTheme = ThemeService.DefaultTheme;
                StateHasChanged();
            }
        }
    }

    private async Task ToggleTheme()
    {
        try
        {
            bool isAvailable = await JS.InvokeAsync<bool>("eval", "typeof window.themeInterop !== 'undefined'");

            if (!isAvailable)
            {
                await JS.InvokeVoidAsync("console.error", "themeInterop is not available when toggling theme");
                return;
            }

            await JS.InvokeVoidAsync("console.log", "Before toggle, current theme:", currentTheme);

            string newTheme = await JS.InvokeAsync<string>("window.themeInterop.toggleTheme");

            currentTheme = newTheme;

            await JS.InvokeVoidAsync("console.log", "After toggle, new theme:", currentTheme);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error toggling theme:", ex.Message);
        }
    }
}
