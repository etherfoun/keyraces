@page "/train"
@attribute [Authorize]
@using System.Net.Http.Json
@using System.Security.Claims
@using keyraces.Server.Dtos
@using keyraces.Core.Entities
@using keyraces.Core.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject ITypingSessionService SessionService
@inject IUserProfileService UserProfileService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

<h3>Тренировка скорости печати</h3>

@if (current == null)
{
    <p>Загрузка текста…</p>
}
else if (!sessionStarted)
{
    <p><strong>Текст для тренировки:</strong></p>
    <blockquote>
        @current.Content
    </blockquote>
    <button class="btn btn-outline-secondary mb-2" @onclick="LoadRandom">
        Другой текст
    </button>
    <button class="btn btn-primary" @onclick="Start">
        Начать
    </button>
}
else
{
    <p><strong>Набирайте:</strong></p>
    <blockquote>@current.Content</blockquote>

    <textarea @bind="userInput" @oninput="OnInput"
              rows="6" class="form-control mb-2" />

    <div>
        Скорость: <strong>@wpm:F1 WPM</strong>
        <span class="ms-3">Ошибки: <strong>@errors</strong></span>
    </div>

    <button class="btn btn-success mt-3" @onclick="Complete">
        Завершить
    </button>
}

@code {
    private TextSnippetDto? current;
    private TypingSession? session;
    private UserProfile? profile;
    private bool sessionStarted;
    private string userInput = "";
    private double wpm;
    private int errors;
    private string identityId = "";

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        if (user.Identity?.IsAuthenticated != true)
        {
            Nav.NavigateTo("/login", forceLoad: true);
            return;
        }

        identityId = user.FindFirst(ClaimTypes.NameIdentifier)!.Value;
        var fallback = user.Identity.Name ?? user.FindFirst(ClaimTypes.Email)!.Value;
        profile = await UserProfileService.GetOrCreateAsync(identityId, fallback);

        await LoadRandom();
    }

    private async Task LoadRandom()
    {
        sessionStarted = false;
        userInput = "";
        wpm = 0;
        errors = 0;
        session = null;

        current = await Http.GetFromJsonAsync<TextSnippetDto>("/api/TextSnippet/random");
    }

    private async Task Start()
    {
        if (current == null || profile == null) return;

        session = await SessionService.StartSessionAsync(
            profile.Id,      
            current.Id       
        );
        sessionStarted = true;
    }

    private void OnInput(ChangeEventArgs e)
    {
        userInput = e.Value?.ToString() ?? "";
        var elapsed = DateTime.UtcNow - session!.StartTime;
        var words = userInput.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
        wpm = elapsed.TotalMinutes > 0 ? words / elapsed.TotalMinutes : 0;
        errors = CalculateErrors(userInput, current!.Content);
    }

    private async Task Complete()
    {
        if (session == null) return;
        await SessionService.CompleteSessionAsync(session.Id, DateTime.UtcNow);
        sessionStarted = false;
    }

    private int CalculateErrors(string input, string target)
    {
        var len = Math.Min(input.Length, target.Length);
        var errs = 0;
        for (int i = 0; i < len; i++)
            if (input[i] != target[i]) errs++;
        errs += Math.Abs(input.Length - target.Length);
        return errs;
    }
}
