@page "/train"
@using System.Net.Http.Json
@using System.Security.Claims
@using keyraces.Server.Dtos
@using keyraces.Core.Entities
@using keyraces.Core.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject ITypingSessionService SessionService
@inject ITypingStatisticService StatisticService
@inject IUserProfileService UserProfileService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<div class="train-container">
    @if (!isAuthenticated)
    {
        <div class="auth-check">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Проверка авторизации...</span>
            </div>
            <p>Проверка авторизации...</p>
        </div>
    }
    else
    {
        <h3>Тренировка скорости печати</h3>

        @if (loading)
        {
            <div class="loading-container">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Загрузка...</span>
                </div>
                <p>Загрузка текста…</p>
            </div>
        }
        else if (current == null)
        {
            <div class="text-options">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Настройки текста</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="textSource">Источник текста:</label>
                                    <select id="textSource" class="form-select" @bind="textSource">
                                        <option value="random">Случайный текст из базы</option>
                                        <option value="generated">Сгенерировать с помощью AI</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="difficulty">Сложность:</label>
                                    <select id="difficulty" class="form-select" @bind="difficulty">
                                        <option value="easy">Легкий</option>
                                        <option value="medium">Средний</option>
                                        <option value="hard">Сложный</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="language">Язык:</label>
                                    <select id="language" class="form-select" @bind="language">
                                        <option value="ru">Русский</option>
                                        <option value="en">English</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        @if (textSource == "generated")
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="topic">Тема текста (опционально):</label>
                                        <input type="text" id="topic" class="form-control" @bind="topic" placeholder="Введите тему или оставьте пустым для случайной темы" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="length">Длина текста (символов):</label>
                                        <input type="number" id="length" class="form-control" @bind="length" min="100" max="1000" step="50" />
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" @onclick="GenerateText" disabled="@isGenerating">
                                    @if (isGenerating)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Генерация...</span>
                                    }
                                    else
                                    {
                                        <span>Сгенерировать текст</span>
                                    }
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetOllamaContext" disabled="@isResettingContext">
                                    @if (isResettingContext)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Сброс...</span>
                                    }
                                    else
                                    {
                                        <span>Сбросить контекст AI</span>
                                    }
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetText">
                                    Сбросить
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" @onclick="LoadRandom">
                                    Загрузить текст
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetText">
                                    Сбросить
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            @if (bestResults != null && bestResults.Count > 0)
            {
                <div class="best-results card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Ваши лучшие результаты</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="best-result-card">
                                    <div class="best-result-title">Лучшая скорость</div>
                                    <div class="best-result-value">@bestWpm.ToString("F1") WPM</div>
                                    <div class="best-result-date">@bestWpmDate.ToString("dd.MM.yyyy HH:mm")</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="best-result-card">
                                    <div class="best-result-title">Лучшая точность</div>
                                    <div class="best-result-value">@bestAccuracy.ToString("F1")%</div>
                                    <div class="best-result-date">@bestAccuracyDate.ToString("dd.MM.yyyy HH:mm")</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="alert alert-info">
                <p>Выберите источник текста и нажмите кнопку для начала тренировки.</p>
            </div>
        }
        else if (!sessionStarted)
        {
            <div class="text-options">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Настройки текста</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="textSource">Источник текста:</label>
                                    <select id="textSource" class="form-select" @bind="textSource">
                                        <option value="random">Случайный текст из базы</option>
                                        <option value="generated">Сгенерировать с помощью AI</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="difficulty">Сложность:</label>
                                    <select id="difficulty" class="form-select" @bind="difficulty">
                                        <option value="easy">Легкий</option>
                                        <option value="medium">Средний</option>
                                        <option value="hard">Сложный</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="language">Язык:</label>
                                    <select id="language" class="form-select" @bind="language">
                                        <option value="ru">Русский</option>
                                        <option value="en">English</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        @if (textSource == "generated")
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="topic">Тема текста (опционально):</label>
                                        <input type="text" id="topic" class="form-control" @bind="topic" placeholder="Введите тему или оставьте пустым для случайной темы" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="length">Длина текста (символов):</label>
                                        <input type="number" id="length" class="form-control" @bind="length" min="100" max="1000" step="50" />
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" @onclick="GenerateText" disabled="@isGenerating">
                                    @if (isGenerating)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Генерация...</span>
                                    }
                                    else
                                    {
                                        <span>Сгенерировать текст</span>
                                    }
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetOllamaContext" disabled="@isResettingContext">
                                    @if (isResettingContext)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Сброс...</span>
                                    }
                                    else
                                    {
                                        <span>Сбросить контекст AI</span>
                                    }
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetText">
                                    Сбросить
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-secondary" @onclick="LoadRandom">
                                    Другой текст
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetText">
                                    Сбросить
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="text-preview card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Текст для тренировки</h5>
                    <div>
                        <span class="badge bg-secondary me-2">@current.Difficulty</span>
                        <span class="badge bg-info">@(current.Language == "ru" ? "Русский" : "English")</span>
                    </div>
                </div>
                <div class="card-body">
                    <p class="text-content">@current.Content</p>
                </div>
                <div class="card-footer">
                    <button class="btn btn-success" @onclick="Start">
                        Начать тренировку
                    </button>
                </div>
            </div>
        }
        else
        {
    <div class="typing-game card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Тренировка</h5>
            <div class="timer">@elapsedTimeDisplay</div>
        </div>
        <div class="card-body p-0">
            <div class="typing-section">
                <div class="typing-title">
                    <div>Набирайте текст:</div>
                    <div class="typing-stats">
                        <div>WPM: <span id="wpm-display">@wpm.ToString("F1")</span></div>
                        <div>Точность: <span id="accuracy-display">@accuracy.ToString("F1")%</span></div>
                        <div>Ошибки: <span id="errors-display">@errors</span></div>
                    </div>
                </div>
                
                <div class="progress" style="height: 4px; border-radius: 0;">
                    <div id="typing-progress-bar" class="progress-bar" role="progressbar" 
                         style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                
                <div class="text-display">
                    <div id="original-text-content">
                        @{
                            var words = current?.Content.Split(' ');
                            if (words != null)
                            {
                                for (int i = 0; i < words.Length; i++)
                                {
                                    <span class="word" data-word="@words[i]">
                                        @foreach (var character in words[i])
                                        {
                                            <span class="character">@character</span>
                                        }
                                    </span>
                                    if (i < words.Length - 1)
                                    {
                                        <span class="character space"> </span>
                                    }
                                }
                            }
                        }
                    </div>
                </div>
                
                <textarea id="typing-input" @bind="userInput" @oninput="OnInput" @onkeydown="OnKeyDown"
                          class="typing-input" rows="3" placeholder="Начните печатать здесь..."></textarea>
            </div>
        </div>
        <div class="card-footer d-flex justify-content-between">
            <button class="btn btn-outline-secondary" @onclick="ResetSession">
                Начать заново
            </button>
            <button class="btn btn-success" @onclick="Complete">
                Завершить
            </button>
        </div>
    </div>
}

        <div class="completion-modal @(showResults ? "show" : "")">
    <div class="completion-modal-content">
        <div class="results-header">
            <h4>Результаты тренировки</h4>
            <button type="button" class="btn-close" @onclick="CloseResults"></button>
        </div>
        <div class="results-body">
            <div class="completion-icon">✓</div>
            
            <div class="result-item">
                <div class="result-label">Скорость:</div>
                <div class="result-value">@finalWpm.ToString("F1") WPM</div>
            </div>
            <div class="result-item">
                <div class="result-label">Точность:</div>
                <div class="result-value">@finalAccuracy.ToString("F1")%</div>
            </div>
            <div class="result-item">
                <div class="result-label">Ошибки:</div>
                <div class="result-value">@finalErrors</div>
            </div>
            <div class="result-item">
                <div class="result-label">Время:</div>
                <div class="result-value">@finalTimeDisplay</div>
            </div>

            @if (isPersonalBest)
            {
                <div class="personal-best">
                    <div class="trophy-icon">🏆</div>
                    <div class="personal-best-text">Новый личный рекорд!</div>
                </div>
            }
        </div>
        <div class="results-footer">
            <button class="btn btn-primary" @onclick="StartNewSession">
                Новая тренировка
            </button>
            <button class="btn btn-outline-secondary" @onclick="CloseResults">
                Закрыть
            </button>
        </div>
    </div>
</div>
    }
</div>

@code {
    private TextSnippetDto? current;
    private TypingSession? session;
    private UserProfile? profile;
    private bool sessionStarted;
    private string userInput = "";
    private double wpm;
    private int errors;
    private double accuracy = 100;
    private string identityId = "";
    private bool loading = false;
    private bool isAuthenticated = false;

    private string textSource = "random";
    private string difficulty = "medium";
    private string topic = "";
    private int length = 300;
    private string language = "ru";
    private bool isGenerating = false;
    private bool isResettingContext = false;

    // Таймер для отслеживания времени тренировки
    private System.Timers.Timer? sessionTimer;
    private TimeSpan elapsedTime = TimeSpan.Zero;
    private string elapsedTimeDisplay = "00:00";

    // Результаты тренировки
    private bool showResults = false;
    private double finalWpm;
    private double finalAccuracy;
    private int finalErrors;
    private string finalTimeDisplay = "";
    private bool isPersonalBest = false;

    // Лучшие результаты пользователя
    private List<TypingStatistic>? bestResults;
    private double bestWpm = 0;
    private double bestAccuracy = 0;
    private DateTime bestWpmDate = DateTime.MinValue;
    private DateTime bestAccuracyDate = DateTime.MinValue;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Train page initialized");
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Checking authentication in OnAfterRenderAsync");

                var auth = await AuthStateProvider.GetAuthenticationStateAsync();
                var user = auth.User;

                if (user.Identity?.IsAuthenticated == true)
                {
                    Console.WriteLine("User is authenticated via AuthenticationStateProvider");

                    identityId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                    var identityUserDisplayName = user.Identity.Name;

                    if (!string.IsNullOrEmpty(identityId) && !string.IsNullOrEmpty(identityUserDisplayName))
                    {
                        Console.WriteLine($"User ID: {identityId}, Name: {identityUserDisplayName}");
                        profile = await UserProfileService.GetOrCreateAsync(identityId, identityUserDisplayName);
                        isAuthenticated = true;
                        await LoadBestResults();
                        StateHasChanged();
                        return;
                    }
                }

                Console.WriteLine("Checking localStorage authentication");

                var token = await JS.InvokeAsync<string>("localStorage.getItem", "auth_token");

                if (string.IsNullOrEmpty(token))
                {
                    Console.WriteLine("No auth_token found in localStorage");
                    Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}", false);
                    return;
                }

                var isExpired = await JS.InvokeAsync<bool>("authInterop.isTokenExpired");

                if (isExpired)
                {
                    Console.WriteLine("Token is expired");
                    Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}", false);
                    return;
                }

                identityId = await JS.InvokeAsync<string>("localStorage.getItem", "user_id");
                var userDisplayName = await JS.InvokeAsync<string>("localStorage.getItem", "user_name");

                if (string.IsNullOrEmpty(identityId))
                {
                    Console.WriteLine("No user_id found in localStorage");
                    Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}", false);
                    return;
                }

                if (string.IsNullOrEmpty(userDisplayName))
                {
                    userDisplayName = "User";
                }

                Console.WriteLine($"User ID from localStorage: {identityId}, Name: {userDisplayName}");
                profile = await UserProfileService.GetOrCreateAsync(identityId, userDisplayName);
                isAuthenticated = true;
                await LoadBestResults();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking authentication in OnAfterRenderAsync: {ex.Message}");
                await JS.InvokeVoidAsync("alert", $"Ошибка при проверке аутентификации: {ex.Message}");
            }
        }
        else if (sessionStarted && session != null)
        {
            // Если сессия уже начата, но JS еще не инициализирован
            try
            {
                // Проверяем, инициализирован ли уже JS
                var isInitialized = await JS.InvokeAsync<bool>("window.trainInterop.initTypingArea", "typing-input", "original-text-content");
                Console.WriteLine($"JS initialization result: {isInitialized}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing typing area: {ex.Message}");
            }
        }
    }

    private async Task LoadBestResults()
    {
        if (profile == null) return;

        try
        {
            // Получаем статистику пользователя
            var response = await Http.GetAsync($"/api/User/{profile.Id}/statistics");
            
            if (response.IsSuccessStatusCode)
            {
                bestResults = await response.Content.ReadFromJsonAsync<List<TypingStatistic>>();
                
                if (bestResults != null && bestResults.Count > 0)
                {
                    // Находим лучшие результаты
                    var bestWpmStat = bestResults.OrderByDescending(s => s.WPM).FirstOrDefault();
                    var bestAccuracyStat = bestResults.OrderByDescending(s => s.Accuracy).FirstOrDefault();
                    
                    if (bestWpmStat != null)
                    {
                        bestWpm = bestWpmStat.WPM;
                        // Получаем дату сессии
                        var sessionResponse = await Http.GetAsync($"/api/Session/{bestWpmStat.SessionId}");
                        if (sessionResponse.IsSuccessStatusCode)
                        {
                            var session = await sessionResponse.Content.ReadFromJsonAsync<TypingSession>();
                            if (session != null)
                            {
                                bestWpmDate = session.CompletedAt;
                            }
                        }
                    }
                    
                    if (bestAccuracyStat != null)
                    {
                        bestAccuracy = bestAccuracyStat.Accuracy * 100; // Преобразуем в проценты
                        // Получаем дату сессии
                        var sessionResponse = await Http.GetAsync($"/api/Session/{bestAccuracyStat.SessionId}");
                        if (sessionResponse.IsSuccessStatusCode)
                        {
                            var session = await sessionResponse.Content.ReadFromJsonAsync<TypingSession>();
                            if (session != null)
                            {
                                bestAccuracyDate = session.CompletedAt;
                            }
                        }
                    }
                }
            }
            else
            {
                Console.WriteLine($"Error loading statistics: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading best results: {ex.Message}");
        }
    }

    private async Task LoadRandom()
    {
        try
        {
            loading = true;
            sessionStarted = false;
            userInput = "";
            wpm = 0;
            errors = 0;
            accuracy = 100;
            session = null;

            var response = await Http.GetAsync($"/api/TextSnippet/random?difficulty={difficulty}&language={language}");

            if (response.IsSuccessStatusCode)
            {
                current = await response.Content.ReadFromJsonAsync<TextSnippetDto>();
                Console.WriteLine($"Loaded random text with ID: {current?.Id}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error loading random text: {error}");
                throw new Exception($"Error loading random text: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading random text: {ex.Message}");
            current = null;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateText()
    {
        try
        {
            isGenerating = true;
            loading = true;
            sessionStarted = false;
            userInput = "";
            wpm = 0;
            errors = 0;
            accuracy = 100;
            session = null;

            var request = new
            {
                Topic = topic,
                Difficulty = difficulty,
                Length = length,
                Language = language,
                Timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            };

            Console.WriteLine($"Generating text with topic: {topic}, difficulty: {difficulty}, length: {length}, language: {language}, timestamp: {request.Timestamp}");

            var response = await Http.PostAsJsonAsync("/api/TextGeneration/generate", request);

            if (response.IsSuccessStatusCode)
            {
                current = await response.Content.ReadFromJsonAsync<TextSnippetDto>();
                Console.WriteLine($"Generated text with ID: {current?.Id}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error generating text: {error}");

                await JS.InvokeVoidAsync("alert", $"Ошибка при генерации текста: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during text generation: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при генерации текста: {ex.Message}");
            current = null;
        }
        finally
        {
            isGenerating = false;
            loading = false;
            StateHasChanged();
        }
    }

    private async Task ResetOllamaContext()
    {
        try
        {
            isResettingContext = true;
            StateHasChanged();

            var response = await Http.PostAsync("/api/TextGeneration/reset-context", null);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Контекст AI успешно сброшен");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error resetting Ollama context: {error}");
                await JS.InvokeVoidAsync("alert", $"Ошибка при сбросе контекста AI: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during context reset: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при сбросе контекста AI: {ex.Message}");
        }
        finally
        {
            isResettingContext = false;
            StateHasChanged();
        }
    }

    private void ResetText()
    {
        current = null;
        sessionStarted = false;
        userInput = "";
        wpm = 0;
        errors = 0;
        accuracy = 100;
        session = null;
        StateHasChanged();
    }

    private async Task Start()
    {
        if (current == null || profile == null) return;

        try
        {
            session = await SessionService.StartSessionAsync(
                profile.Id,
                current.Id
            );
        
            // Устанавливаем флаг, что сессия начата
            sessionStarted = true;
        
            // Инициализируем таймер
            StartTimer();
        
            // Обновляем UI
            StateHasChanged();
        
            // Даем время для рендеринга
            await Task.Delay(300);
        
            // Инициализируем подсветку текста
            try {
                var result = await JS.InvokeAsync<bool>("window.trainInterop.initTypingArea", "typing-input", "original-text-content");
                Console.WriteLine($"Typing area initialization result: {result}");
            }
            catch (Exception ex) {
                Console.WriteLine($"Error initializing typing area: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting session: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при начале сессии: {ex.Message}");
        }
    }

    private void StartTimer()
    {
        elapsedTime = TimeSpan.Zero;
        elapsedTimeDisplay = "00:00";
        
        sessionTimer = new System.Timers.Timer(1000);
        sessionTimer.Elapsed += (sender, e) => 
        {
            elapsedTime = elapsedTime.Add(TimeSpan.FromSeconds(1));
            elapsedTimeDisplay = $"{elapsedTime.Minutes:00}:{elapsedTime.Seconds:00}";
            InvokeAsync(StateHasChanged);
        };
        sessionTimer.AutoReset = true;
        sessionTimer.Enabled = true;
    }

    private void StopTimer()
    {
        if (sessionTimer != null)
        {
            sessionTimer.Enabled = false;
            sessionTimer.Dispose();
            sessionTimer = null;
        }
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        if (session == null || current == null) return;

        userInput = e.Value?.ToString() ?? "";
        
        // Обновляем статистику
        UpdateStatistics();
        
        // Обновляем подсветку через JS
        try {
            await JS.InvokeVoidAsync("window.trainInterop.updateHighlighting", userInput);
        }
        catch (Exception ex) {
            Console.WriteLine($"Error updating highlighting: {ex.Message}");
        }
        
        // Если пользователь закончил набор текста, автоматически завершаем
        if (userInput.Split(' ').Length >= current.Content.Split(' ').Length && 
            userInput.Length >= current.Content.Length * 0.9) // Проверяем, что набрано не менее 90% текста
        {
            await Complete();
        }
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        // Можно добавить обработку специальных клавиш
        if (e.Key == "Escape")
        {
            // Например, Escape для отмены тренировки
            ResetSession();
        }
    }

    private void UpdateStatistics()
    {
        if (session == null || current == null) return;
        
        var elapsed = DateTime.UtcNow - session.StartTime;
        
        // Расчет WPM (слов в минуту)
        // Стандартное слово - 5 символов
        var standardWords = userInput.Length / 5.0;
        wpm = elapsed.TotalMinutes > 0 ? standardWords / elapsed.TotalMinutes : 0;
        
        // Расчет ошибок и точности
        errors = CalculateErrors(userInput, current.Content.Substring(0, Math.Min(userInput.Length, current.Content.Length)));

        if (userInput.Length > 0)
        {
            var correctChars = Math.Max(0, userInput.Length - errors);
            accuracy = (double)correctChars / userInput.Length * 100;
        }
        else
        {
            accuracy = 100;
        }
    }

    private void ResetSession()
    {
        StopTimer();
        sessionStarted = false;
        userInput = "";
        wpm = 0;
        errors = 0;
        accuracy = 100;
        StateHasChanged();
    }

    private async Task Complete()
    {
        if (session == null || current == null) return;

        try
        {
            StopTimer();
            
            // Сохраняем конечное время сессии
            await SessionService.CompleteSessionAsync(session.Id, DateTime.UtcNow);
            
            // Сохраняем статистику
            await StatisticService.CreateAsync(session.Id, wpm, errors);
            
            // Сохраняем финальные результаты для отображения
            finalWpm = wpm;
            finalAccuracy = accuracy;
            finalErrors = errors;
            finalTimeDisplay = elapsedTimeDisplay;
            
            // Проверяем, является ли это личным рекордом
            isPersonalBest = bestWpm < wpm || bestAccuracy < accuracy;
            
            // Если это новый рекорд, обновляем лучшие результаты
            if (isPersonalBest)
            {
                await LoadBestResults();
            }
            
            // Показываем анимацию завершения
            try {
                await JS.InvokeVoidAsync("window.trainInterop.showCompletionAnimation");
            }
            catch (Exception ex) {
                Console.WriteLine($"Error showing completion animation: {ex.Message}");
            }
            
            // Показываем модальное окно с результатами
            showResults = true;
            sessionStarted = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error completing session: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при завершении сессии: {ex.Message}");
        }
    }

    private void CloseResults()
    {
        showResults = false;
        userInput = "";
        wpm = 0;
        errors = 0;
        accuracy = 100;
        current = null;
        StateHasChanged();
    }

    private void StartNewSession()
    {
        showResults = false;
        userInput = "";
        wpm = 0;
        errors = 0;
        accuracy = 100;
        current = null;
        StateHasChanged();
    }

    private int CalculateErrors(string input, string target)
    {
        var len = Math.Min(input.Length, target.Length);
        var errs = 0;
        for (int i = 0; i < len; i++)
            if (input[i] != target[i]) errs++;
        
        // Не считаем разницу в длине как ошибки, так как пользователь еще не закончил набор
        return errs;
    }

    public void Dispose()
    {
        StopTimer();
    }
}
