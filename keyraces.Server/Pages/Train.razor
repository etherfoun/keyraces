@page "/train"
@using System.Net.Http.Json
@using System.Security.Claims
@using keyraces.Server.Dtos
@using keyraces.Core.Entities
@using keyraces.Core.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject ITypingSessionService SessionService
@inject IUserProfileService UserProfileService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<div class="train-container">
    <h3>Тренировка скорости печати</h3>

    @if (loading)
    {
            <div class="loading-container">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Загрузка...</span>
                </div>
                <p>Загрузка текста…</p>
            </div>
    }
    else if (current == null)
    {
            <div class="alert alert-warning">
                <p>Не удалось загрузить текст. Пожалуйста, попробуйте позже.</p>
                <button class="btn btn-primary" @onclick="LoadRandom">Попробовать снова</button>
            </div>
    }
    else if (!sessionStarted)
    {
            <div class="text-options">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Настройки текста</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="textSource">Источник текста:</label>
                                    <select id="textSource" class="form-select" @bind="textSource">
                                        <option value="random">Случайный текст из базы</option>
                                        <option value="generated">Сгенерировать с помощью AI</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="difficulty">Сложность:</label>
                                    <select id="difficulty" class="form-select" @bind="difficulty">
                                        <option value="easy">Легкий</option>
                                        <option value="medium">Средний</option>
                                        <option value="hard">Сложный</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                    @if (textSource == "generated")
                    {
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="topic">Тема текста (опционально):</label>
                                            <input type="text" id="topic" class="form-control" @bind="topic" placeholder="Введите тему или оставьте пустым для случайной темы" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="length">Длина текста (символов):</label>
                                            <input type="number" id="length" class="form-control" @bind="length" min="100" max="1000" step="50" />
                                        </div>
                                    </div>
                                </div>
                                <button class="btn btn-primary" @onclick="GenerateText" disabled="@isGenerating">
                            @if (isGenerating)
                            {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span class="ms-2">Генерация...</span>
                            }
                            else
                            {
                                            <span>Сгенерировать текст</span>
                            }
                                </button>
                    }
                    else
                    {
                                <button class="btn btn-outline-secondary" @onclick="LoadRandom">
                                    Другой текст
                                </button>
                    }
                    </div>
                </div>
            </div>

            <div class="text-preview card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Текст для тренировки</h5>
                    <span class="badge bg-secondary">@current.Difficulty</span>
                </div>
                <div class="card-body">
                    <p class="text-content">@current.Content</p>
                </div>
                <div class="card-footer">
                    <button class="btn btn-success" @onclick="Start">
                        Начать тренировку
                    </button>
                </div>
            </div>
    }
    else
    {
            <div class="typing-session card">
                <div class="card-header">
                    <h5 class="mb-0">Набирайте текст:</h5>
                </div>
                <div class="card-body">
                    <div class="original-text mb-3">
                        <p>@current.Content</p>
                    </div>

                    <div class="form-group">
                        <textarea @bind="userInput" @oninput="OnInput"
                                  rows="6" class="form-control mb-3" 
                                  placeholder="Начните печатать здесь..."></textarea>
                    </div>

                    <div class="stats-container">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="stat-card">
                                    <div class="stat-label">Скорость</div>
                                    <div class="stat-value">@wpm:F1 WPM</div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="stat-card">
                                    <div class="stat-label">Ошибки</div>
                                    <div class="stat-value">@errors</div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="stat-card">
                                    <div class="stat-label">Точность</div>
                                    <div class="stat-value">@accuracy:F1%</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-success" @onclick="Complete">
                        Завершить
                    </button>
                </div>
            </div>
    }
</div>

<style>
    .train-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
    }

    .text-content {
        font-size: 1.1rem;
        line-height: 1.6;
        white-space: pre-wrap;
    }

    .original-text {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        border-left: 4px solid #6c757d;
    }

    .stats-container {
        margin-top: 20px;
    }

    .stat-card {
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 10px;
        text-align: center;
        margin-bottom: 10px;
    }

    .stat-label {
        font-size: 0.9rem;
        color: #6c757d;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
    }
</style>

@code {
    private TextSnippetDto? current;
    private TypingSession? session;
    private UserProfile? profile;
    private bool sessionStarted;
    private string userInput = "";
    private double wpm;
    private int errors;
    private double accuracy = 100;
    private string identityId = "";
    private bool loading = true;
    private bool authCheckCompleted = false;

    private string textSource = "random";
    private string difficulty = "medium";
    private string topic = "";
    private int length = 300;
    private bool isGenerating = false;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            try
            {
                var token = await JS.InvokeAsync<string>("localStorage.getItem", "auth_token");
                var isExpired = string.IsNullOrEmpty(token) || await JS.InvokeAsync<bool>("authInterop.isTokenExpired");

                if (isExpired)
                {
                    Console.WriteLine("User is not authenticated, redirecting to login page");
                    Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}", false);
                    return;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking token: {ex.Message}");
                Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}", false);
                return;
            }
        }

        authCheckCompleted = true;

        try
        {
            identityId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(identityId))
            {
                identityId = await JS.InvokeAsync<string>("localStorage.getItem", "user_id");

                if (string.IsNullOrEmpty(identityId))
                {
                    Console.WriteLine("User ID not found");
                    Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}", false);
                    return;
                }
            }

            var fallback = user.Identity?.Name ??
                           user.FindFirst(ClaimTypes.Email)?.Value ??
                           await JS.InvokeAsync<string>("localStorage.getItem", "user_name");

            if (string.IsNullOrEmpty(fallback))
            {
                fallback = "User";
            }

            profile = await UserProfileService.GetOrCreateAsync(identityId, fallback);

            await LoadRandom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing training page: {ex.Message}");
            loading = false;
        }
    }

    private async Task LoadRandom()
    {
        try
        {
            loading = true;
            sessionStarted = false;
            userInput = "";
            wpm = 0;
            errors = 0;
            accuracy = 100;
            session = null;

            var response = await Http.GetAsync($"/api/TextSnippet/random?difficulty={difficulty}");

            if (response.IsSuccessStatusCode)
            {
                current = await response.Content.ReadFromJsonAsync<TextSnippetDto>();
                Console.WriteLine($"Loaded random text with ID: {current?.Id}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error loading random text: {error}");
                throw new Exception($"Error loading random text: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading random text: {ex.Message}");
            current = null;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateText()
    {
        try
        {
            isGenerating = true;
            loading = true;
            sessionStarted = false;
            userInput = "";
            wpm = 0;
            errors = 0;
            accuracy = 100;
            session = null;

            var request = new
            {
                Topic = topic,
                Difficulty = difficulty,
                Length = length
            };

            Console.WriteLine($"Generating text with topic: {topic}, difficulty: {difficulty}, length: {length}");

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "auth_token");

            var requestMessage = new HttpRequestMessage(HttpMethod.Post, "/api/TextGeneration/generate");
            requestMessage.Content = JsonContent.Create(request);

            if (!string.IsNullOrEmpty(token))
            {
                requestMessage.Headers.Add("Authorization", $"Bearer {token}");
            }

            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {
                current = await response.Content.ReadFromJsonAsync<TextSnippetDto>();
                Console.WriteLine($"Generated text with ID: {current?.Id}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error generating text: {error}");

                await JS.InvokeVoidAsync("alert", $"Ошибка при генерации текста: {error}");

                Console.WriteLine("Loading random text instead");
                await LoadRandom();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during text generation: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при генерации текста: {ex.Message}");
            current = null;
        }
        finally
        {
            isGenerating = false;
            loading = false;
            StateHasChanged();
        }
    }

    private async Task Start()
    {
        if (current == null || profile == null) return;

        try
        {
            session = await SessionService.StartSessionAsync(
                profile.Id,
                current.Id
            );
            sessionStarted = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting session: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при начале сессии: {ex.Message}");
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        if (session == null || current == null) return;

        userInput = e.Value?.ToString() ?? "";
        var elapsed = DateTime.UtcNow - session.StartTime;
        var words = userInput.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
        wpm = elapsed.TotalMinutes > 0 ? words / elapsed.TotalMinutes : 0;
        errors = CalculateErrors(userInput, current.Content);

        if (userInput.Length > 0)
        {
            var correctChars = Math.Max(0, userInput.Length - errors);
            accuracy = (double)correctChars / userInput.Length * 100;
        }
        else
        {
            accuracy = 100;
        }
    }

    private async Task Complete()
    {
        if (session == null) return;

        try
        {
            await SessionService.CompleteSessionAsync(session.Id, DateTime.UtcNow);
            sessionStarted = false;

            await JS.InvokeVoidAsync("alert", $"Тренировка завершена!\n\nСкорость: {wpm:F1} WPM\nОшибки: {errors}\nТочность: {accuracy:F1}%");

            userInput = "";
            wpm = 0;
            errors = 0;
            accuracy = 100;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error completing session: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при завершении сессии: {ex.Message}");
        }
    }

    private int CalculateErrors(string input, string target)
    {
        var len = Math.Min(input.Length, target.Length);
        var errs = 0;
        for (int i = 0; i < len; i++)
            if (input[i] != target[i]) errs++;
        errs += Math.Abs(input.Length - target.Length);
        return errs;
    }
}
