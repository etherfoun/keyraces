@page "/train"
@using System.Net.Http.Json
@using System.Security.Claims
@using keyraces.Server.Dtos
@using keyraces.Core.Entities
@using keyraces.Core.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject ITypingSessionService SessionService
@inject ITypingStatisticService StatisticService
@inject IUserProfileService UserProfileService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<div class="train-container">
    @if (!isAuthenticated)
    {
        <div class="auth-check">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Проверка авторизации...</span>
            </div>
            <p>Проверка авторизации...</p>
        </div>
    }
    else
    {
        <h3>Тренировка скорости печати</h3>

        @if (loading)
        {
            <div class="loading-container">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Загрузка...</span>
                </div>
                <p>Загрузка текста…</p>
            </div>
        }
        else if (current == null)
        {
            <div class="text-options">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Настройки текста</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="textSource">Источник текста:</label>
                                    <select id="textSource" class="form-select" @bind="textSource">
                                        <option value="random">Случайный текст из базы</option>
                                        <option value="generated">Сгенерировать с помощью AI</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="difficulty">Сложность:</label>
                                    <select id="difficulty" class="form-select" @bind="difficulty">
                                        <option value="easy">Легкий</option>
                                        <option value="medium">Средний</option>
                                        <option value="hard">Сложный</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="language">Язык:</label>
                                    <select id="language" class="form-select" @bind="language">
                                        <option value="ru">Русский</option>
                                        <option value="en">English</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        @if (textSource == "generated")
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="topic">Тема текста (опционально):</label>
                                        <input type="text" id="topic" class="form-control" @bind="topic" placeholder="Введите тему или оставьте пустым для случайной темы" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="length">Длина текста (символов):</label>
                                        <input type="number" id="length" class="form-control" @bind="length" min="100" max="1000" step="50" />
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" @onclick="GenerateText" disabled="@isGenerating">
                                    @if (isGenerating)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Генерация...</span>
                                    }
                                    else
                                    {
                                        <span>Сгенерировать текст</span>
                                    }
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetOllamaContext" disabled="@isResettingContext">
                                    @if (isResettingContext)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Сброс...</span>
                                    }
                                    else
                                    {
                                        <span>Сбросить контекст AI</span>
                                    }
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetText">
                                    Сбросить
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" @onclick="LoadRandom">
                                    Загрузить текст
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetText">
                                    Сбросить
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            @if (bestResults != null && bestResults.Count > 0)
            {
                <div class="best-results card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Ваши лучшие результаты</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="best-result-card">
                                    <div class="best-result-title">Лучшая скорость</div>
                                    <div class="best-result-value">@bestWpm.ToString("F1") WPM</div>
                                    <div class="best-result-date">@bestWpmDate.ToString("dd.MM.yyyy HH:mm")</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="best-result-card">
                                    <div class="best-result-title">Лучшая точность</div>
                                    <div class="best-result-value">@bestAccuracy.ToString("F1")%</div>
                                    <div class="best-result-date">@bestAccuracyDate.ToString("dd.MM.yyyy HH:mm")</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="alert alert-info">
                <p>Выберите источник текста и нажмите кнопку для начала тренировки.</p>
            </div>
        }
        else if (!sessionStarted)
        {
            <div class="text-options">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Настройки текста</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="textSource">Источник текста:</label>
                                    <select id="textSource" class="form-select" @bind="textSource">
                                        <option value="random">Случайный текст из базы</option>
                                        <option value="generated">Сгенерировать с помощью AI</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="difficulty">Сложность:</label>
                                    <select id="difficulty" class="form-select" @bind="difficulty">
                                        <option value="easy">Легкий</option>
                                        <option value="medium">Средний</option>
                                        <option value="hard">Сложный</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="language">Язык:</label>
                                    <select id="language" class="form-select" @bind="language">
                                        <option value="ru">Русский</option>
                                        <option value="en">English</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        @if (textSource == "generated")
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="topic">Тема текста (опционально):</label>
                                        <input type="text" id="topic" class="form-control" @bind="topic" placeholder="Введите тему или оставьте пустым для случайной темы" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="length">Длина текста (символов):</label>
                                        <input type="number" id="length" class="form-control" @bind="length" min="100" max="1000" step="50" />
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" @onclick="GenerateText" disabled="@isGenerating">
                                    @if (isGenerating)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Генерация...</span>
                                    }
                                    else
                                    {
                                        <span>Сгенерировать текст</span>
                                    }
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetOllamaContext" disabled="@isResettingContext">
                                    @if (isResettingContext)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Сброс...</span>
                                    }
                                    else
                                    {
                                        <span>Сбросить контекст AI</span>
                                    }
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetText">
                                    Сбросить
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-secondary" @onclick="LoadRandom">
                                    Другой текст
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetText">
                                    Сбросить
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="text-preview card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Текст для тренировки</h5>
                    <div>
                        <span class="badge bg-secondary me-2">@current.Difficulty</span>
                        <span class="badge bg-info">@(current.Language == "ru" ? "Русский" : "English")</span>
                    </div>
                </div>
                <div class="card-body">
                    <p class="text-content">@current.Content</p>
                </div>
                <div class="card-footer">
                    <button class="btn btn-success" @onclick="Start">
                        Начать тренировку
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="typing-game card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Тренировка</h5>
                    <div class="timer">@elapsedTimeDisplay</div>
                </div>
                <div class="card-body p-0">
                    <div class="typing-section">
                        <div class="typing-title">
                            <div>Набирайте текст:</div>
                            <div class="typing-stats">
                                <div>WPM: <span id="wpm-display">@wpm.ToString("F1")</span></div>
                                <div>Точность: <span id="accuracy-display">@accuracy.ToString("F1")%</span></div>
                                <div>Ошибки: <span id="errors-display">@totalErrors</span></div>
                            </div>
                        </div>
                        
                        <div class="progress" style="height: 4px; border-radius: 0;">
                            <div id="typing-progress-bar" class="progress-bar" role="progressbar" 
                                 style="width: @progressPercentage%;" aria-valuenow="@progressPercentage" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        
                        <div class="text-display">
                            <div id="original-text-content">
                                @{
                                    var words = current?.Content.Split(' ');
                                    if (words != null)
                                    {
                                        for (int i = 0; i < words.Length; i++)
                                        {
                                            <span class="word @(i < currentWordIndex ? "completed" : i == currentWordIndex ? "current-word" : "")" 
                                                  data-word="@words[i]" data-index="@i">
                                                @foreach (var character in words[i])
                                                {
                                                    <span class="character">@character</span>
                                                }
                                            </span>
                                            if (i < words.Length - 1)
                                            {
                                                <span class="space"> </span>
                                            }
                                        }
                                    }
                                }
                            </div>
                        </div>
                       
                        <input type="text" id="typing-input" 
                               @ref="typingInputRef"
                               @onkeydown="HandleKeyDown"
                               @oninput="HandleInput"
                               autocomplete="off"
                               autocorrect="off"
                               autocapitalize="off"
                               spellcheck="false"
                               autofocus
                               class="typing-input" 
                               placeholder="Введите текущее слово..." />
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <button class="btn btn-outline-secondary" @onclick="ResetSession">
                        Начать заново
                    </button>
                    <button class="btn btn-success" @onclick="Complete" disabled="@(currentWordIndex < totalWords)">
                        Завершить
                    </button>
                </div>
            </div>
        }

        <div class="completion-modal @(showResults ? "show" : "")">
            <div class="completion-modal-content">
                <div class="results-header">
                    <h4>Результаты тренировки</h4>
                    <button type="button" class="btn-close" @onclick="CloseResults"></button>
                </div>
                <div class="results-body">
                    <div class="completion-icon">✓</div>
                    
                    <div class="result-item">
                        <div class="result-label">Скорость:</div>
                        <div class="result-value">@finalWpm.ToString("F1") WPM</div>
                    </div>
                    <div class="result-item">
                        <div class="result-label">Точность:</div>
                        <div class="result-value">@finalAccuracy.ToString("F1")%</div>
                    </div>
                    <div class="result-item">
                        <div class="result-label">Ошибки:</div>
                        <div class="result-value">@finalErrors</div>
                    </div>
                    <div class="result-item">
                        <div class="result-label">Время:</div>
                        <div class="result-value">@finalTimeDisplay</div>
                    </div>

                    @if (isPersonalBest)
                    {
                        <div class="personal-best">
                            <div class="trophy-icon">🏆</div>
                            <div class="personal-best-text">Новый личный рекорд!</div>
                        </div>
                    }
                </div>
                <div class="results-footer">
                    <button class="btn btn-primary" @onclick="StartNewSession">
                        Новая тренировка
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="CloseResults">
                        Закрыть
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private TextSnippetDto? current;
    private TypingSession? session;
    private UserProfile? profile;
    private bool sessionStarted;
    private string userInput = "";
    private double wpm;
    private int errors;
    private double accuracy = 100;
    private string identityId = "";
    private bool loading = false;
    private bool isAuthenticated = false;

    private string textSource = "random";
    private string difficulty = "medium";
    private string topic = "";
    private int length = 300;
    private string language = "ru";
    private bool isGenerating = false;
    private bool isResettingContext = false;

    private int currentWordIndex = 0;
    private int totalWords = 0;
    private int totalErrors = 0;
    private int totalCharactersTyped = 0;
    private double progressPercentage = 0;
    private string[]? words;

    private System.Timers.Timer? sessionTimer;
    private TimeSpan elapsedTime = TimeSpan.Zero;
    private string elapsedTimeDisplay = "00:00";

    private bool showResults = false;
    private double finalWpm;
    private double finalAccuracy;
    private int finalErrors;
    private string finalTimeDisplay = "";
    private bool isPersonalBest = false;

    private List<TypingStatistic>? bestResults;
    private double bestWpm = 0;
    private double bestAccuracy = 0;
    private DateTime bestWpmDate = DateTime.MinValue;
    private DateTime bestAccuracyDate = DateTime.MinValue;

    private ElementReference typingInputRef;
    private bool isTypingAreaInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Train page initialized");
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Checking authentication in OnAfterRenderAsync");

            var auth = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                Console.WriteLine("User is authenticated via AuthenticationStateProvider");

                identityId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                var identityUserDisplayName = user.Identity.Name;

                if (!string.IsNullOrEmpty(identityId) && !string.IsNullOrEmpty(identityUserDisplayName))
                {
                    Console.WriteLine($"User ID: {identityId}, Name: {identityUserDisplayName}");
                    profile = await UserProfileService.GetOrCreateAsync(identityId, identityUserDisplayName);
                    isAuthenticated = true;
                    await LoadBestResults();
                    StateHasChanged();
                    return;
                }
            }

            Console.WriteLine("Checking localStorage authentication");

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "auth_token");

            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("No auth_token found in localStorage");
                Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}", false);
                return;
            }

            var isExpired = await JS.InvokeAsync<bool>("authInterop.isTokenExpired");

            if (isExpired)
            {
                Console.WriteLine("Token is expired");
                Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}", false);
                return;
            }

            identityId = await JS.InvokeAsync<string>("localStorage.getItem", "user_id");
            var userDisplayName = await JS.InvokeAsync<string>("localStorage.getItem", "user_name");

            if (string.IsNullOrEmpty(identityId))
            {
                Console.WriteLine("No user_id found in localStorage");
                Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}", false);
                return;
            }

            if (string.IsNullOrEmpty(userDisplayName))
            {
                userDisplayName = "User";
            }

            Console.WriteLine($"User ID from localStorage: {identityId}, Name: {userDisplayName}");
            profile = await UserProfileService.GetOrCreateAsync(identityId, userDisplayName);
            isAuthenticated = true;
            await LoadBestResults();
            StateHasChanged();
        }
    
        if (!firstRender && sessionStarted && session != null && !isTypingAreaInitialized)
        {
            isTypingAreaInitialized = true;
            await JS.InvokeVoidAsync("window.trainInterop.initWordByWord", currentWordIndex);
        
            await typingInputRef.FocusAsync();
        }
    }

    private async Task LoadBestResults()
    {
        if (profile == null) return;

        try
        {
            var response = await Http.GetAsync($"/api/User/{profile.Id}/statistics");
            
            if (response.IsSuccessStatusCode)
            {
                bestResults = await response.Content.ReadFromJsonAsync<List<TypingStatistic>>();
                
                if (bestResults != null && bestResults.Count > 0)
                {
                    var bestWpmStat = bestResults.OrderByDescending(s => s.WPM).FirstOrDefault();
                    var bestAccuracyStat = bestResults.OrderByDescending(s => s.Accuracy).FirstOrDefault();
                    
                    if (bestWpmStat != null)
                    {
                        bestWpm = bestWpmStat.WPM;
                        var sessionResponse = await Http.GetAsync($"/api/Session/{bestWpmStat.SessionId}");
                        if (sessionResponse.IsSuccessStatusCode)
                        {
                            var session = await sessionResponse.Content.ReadFromJsonAsync<TypingSession>();
                            if (session != null)
                            {
                                bestWpmDate = session.CompletedAt;
                            }
                        }
                    }
                    
                    if (bestAccuracyStat != null)
                    {
                        bestAccuracy = bestAccuracyStat.Accuracy * 100;
                        var sessionResponse = await Http.GetAsync($"/api/Session/{bestAccuracyStat.SessionId}");
                        if (sessionResponse.IsSuccessStatusCode)
                        {
                            var session = await sessionResponse.Content.ReadFromJsonAsync<TypingSession>();
                            if (session != null)
                            {
                                bestAccuracyDate = session.CompletedAt;
                            }
                        }
                    }
                }
            }
            else
            {
                Console.WriteLine($"Error loading statistics: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading best results: {ex.Message}");
        }
    }

    private async Task LoadRandom()
    {
        try
        {
            loading = true;
            sessionStarted = false;
            userInput = "";
            wpm = 0;
            errors = 0;
            accuracy = 100;
            session = null;

            var response = await Http.GetAsync($"/api/TextSnippet/random?difficulty={difficulty}&language={language}");

            if (response.IsSuccessStatusCode)
            {
                current = await response.Content.ReadFromJsonAsync<TextSnippetDto>();
                Console.WriteLine($"Loaded random text with ID: {current?.Id}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error loading random text: {error}");
                throw new Exception($"Error loading random text: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading random text: {ex.Message}");
            current = null;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateText()
    {
        try
        {
            isGenerating = true;
            loading = true;
            sessionStarted = false;
            userInput = "";
            wpm = 0;
            errors = 0;
            accuracy = 100;
            session = null;

            var request = new
            {
                Topic = topic,
                Difficulty = difficulty,
                Length = length,
                Language = language,
                Timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            };

            Console.WriteLine($"Generating text with topic: {topic}, difficulty: {difficulty}, length: {length}, language: {language}, timestamp: {request.Timestamp}");

            var response = await Http.PostAsJsonAsync("/api/TextGeneration/generate", request);

            if (response.IsSuccessStatusCode)
            {
                current = await response.Content.ReadFromJsonAsync<TextSnippetDto>();
                Console.WriteLine($"Generated text with ID: {current?.Id}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error generating text: {error}");

                await JS.InvokeVoidAsync("alert", $"Ошибка при генерации текста: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during text generation: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при генерации текста: {ex.Message}");
            current = null;
        }
        finally
        {
            isGenerating = false;
            loading = false;
            StateHasChanged();
        }
    }

    private async Task ResetOllamaContext()
    {
        try
        {
            isResettingContext = true;
            StateHasChanged();

            var response = await Http.PostAsync("/api/TextGeneration/reset-context", null);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Контекст AI успешно сброшен");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error resetting Ollama context: {error}");
                await JS.InvokeVoidAsync("alert", $"Ошибка при сбросе контекста AI: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during context reset: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при сбросе контекста AI: {ex.Message}");
        }
        finally
        {
            isResettingContext = false;
            StateHasChanged();
        }
    }

    private void ResetText()
    {
        current = null;
        sessionStarted = false;
        userInput = "";
        wpm = 0;
        errors = 0;
        accuracy = 100;
        session = null;
        currentWordIndex = 0;
        totalWords = 0;
        totalErrors = 0;
        totalCharactersTyped = 0;
        progressPercentage = 0;
        StateHasChanged();
    }

    private async Task Start()
    {
        if (current == null || profile == null) return;

        try
        {
            session = await SessionService.StartSessionAsync(
                profile.Id,
                current.Id
            );
        
            words = current.Content.Split(' ');
            totalWords = words.Length;
            currentWordIndex = 0;
            totalErrors = 0;
            totalCharactersTyped = 0;
            progressPercentage = 0;
            userInput = "";
        
            sessionStarted = true;
        
            StartTimer();
        
            StateHasChanged();
        
            await Task.Delay(100);
        
            try {
                await JS.InvokeVoidAsync("document.getElementById", "typing-input");
                await JS.InvokeVoidAsync("eval", "document.getElementById('typing-input').focus()");
            }
            catch (Exception ex) {
                Console.WriteLine($"Error focusing input: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting session: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при начале сессии: {ex.Message}");
        }
    }

    private void StartTimer()
    {
        elapsedTime = TimeSpan.Zero;
        elapsedTimeDisplay = "00:00";
        
        sessionTimer = new System.Timers.Timer(1000);
        sessionTimer.Elapsed += (sender, e) => 
        {
            elapsedTime = elapsedTime.Add(TimeSpan.FromSeconds(1));
            elapsedTimeDisplay = $"{elapsedTime.Minutes:00}:{elapsedTime.Seconds:00}";
            InvokeAsync(StateHasChanged);
        };
        sessionTimer.AutoReset = true;
        sessionTimer.Enabled = true;
    }

    private void StopTimer()
    {
        if (sessionTimer != null)
        {
            sessionTimer.Enabled = false;
            sessionTimer.Dispose();
            sessionTimer = null;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (words == null || currentWordIndex >= words.Length) return;

        try
        {
            if (e.Key == "v" && (e.CtrlKey || e.MetaKey))
            {
                return;
            }
    
            if (e.Key == "Escape")
            {
                ResetSession();
                return;
            }

            if (e.Key == " ")
            {
                if (words != null && currentWordIndex < words.Length)
                {
                    var expectedWord = words[currentWordIndex];
                    if (userInput.Trim() == expectedWord)
                    {
                        await MoveToNextWord();
                    }
                }
                return;
            }

            if (e.Key == "Enter")
            {
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleKeyDown: {ex.Message}");
        }
    }

    private async Task MoveToNextWord()
    {
        if (words == null || currentWordIndex >= words.Length) return;

        var expectedWord = words[currentWordIndex];
        var typedWord = userInput.Trim();

        totalCharactersTyped += typedWord.Length;

        currentWordIndex++;
        userInput = "";
        progressPercentage = (double)currentWordIndex / totalWords * 100;

        totalErrors = await JS.InvokeAsync<int>("window.trainInterop.getErrorCount");

        UpdateStatistics();

        try 
        {
            await JS.InvokeVoidAsync("window.trainInterop.moveToNextWord", currentWordIndex);
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Error updating word highlighting: {ex.Message}");
        }

        if (currentWordIndex >= totalWords)
        {
            await Complete();
        }
        
        StateHasChanged();
    }

    private void UpdateStatistics()
    {
        if (session == null || current == null) return;
        
        var elapsed = DateTime.UtcNow - session.StartTime;
        
        wpm = elapsed.TotalMinutes > 0 ? currentWordIndex / elapsed.TotalMinutes : 0;
        
        if (totalCharactersTyped > 0)
        {
            var correctChars = Math.Max(0, totalCharactersTyped - totalErrors);
            accuracy = (double)correctChars / totalCharactersTyped * 100;
        }
        else
        {
            accuracy = 100;
        }
    }

    private async Task ResetSession()
    {
        StopTimer();
        sessionStarted = false;
        userInput = "";
        wpm = 0;
        errors = 0;
        accuracy = 100;
        currentWordIndex = 0;
        totalErrors = 0;
        totalCharactersTyped = 0;
        progressPercentage = 0;
        isTypingAreaInitialized = false;
        
        // Сбрасываем счетчик ошибок в JavaScript
        await JS.InvokeVoidAsync("window.trainInterop.resetErrorCount");
        
        StateHasChanged();
    }

    private async Task Complete()
    {
        if (session == null || current == null) return;

        try
        {
            StopTimer();
            
            totalErrors = await JS.InvokeAsync<int>("window.trainInterop.getErrorCount");
            
            UpdateStatistics();
            
            await SessionService.CompleteSessionAsync(session.Id, DateTime.UtcNow);
            
            await StatisticService.CreateAsync(session.Id, wpm, totalErrors);
            
            finalWpm = wpm;
            finalAccuracy = accuracy;
            finalErrors = totalErrors;
            finalTimeDisplay = elapsedTimeDisplay;
            
            isPersonalBest = bestWpm < wpm || bestAccuracy < accuracy;
            
            if (isPersonalBest)
            {
                await LoadBestResults();
            }
            
            try {
                await JS.InvokeVoidAsync("window.trainInterop.showCompletionAnimation");
            }
            catch (Exception ex) {
                Console.WriteLine($"Error showing completion animation: {ex.Message}");
            }
            
            showResults = true;
            sessionStarted = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error completing session: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при завершении сессии: {ex.Message}");
        }
    }

    private void CloseResults()
    {
        showResults = false;
        userInput = "";
        wpm = 0;
        errors = 0;
        accuracy = 100;
        current = null;
        currentWordIndex = 0;
        totalErrors = 0;
        totalCharactersTyped = 0;
        progressPercentage = 0;
        StateHasChanged();
    }

    private void StartNewSession()
    {
        showResults = false;
        userInput = "";
        wpm = 0;
        errors = 0;
        accuracy = 100;
        current = null;
        currentWordIndex = 0;
        totalErrors = 0;
        totalCharactersTyped = 0;
        progressPercentage = 0;
        StateHasChanged();
    }

    public void Dispose()
    {
        StopTimer();
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        if (words == null || currentWordIndex >= words.Length) return;
    
        try
        {
            string currentInput = e.Value?.ToString() ?? "";
            
            userInput = currentInput;
        
            if (words != null && currentWordIndex < words.Length)
            {
                var expectedWord = words[currentWordIndex];
                
                var result = await JS.InvokeAsync<dynamic>("window.trainInterop.handleInput", new { value = currentInput });
                
                bool isCompleted = result.GetProperty("completed").GetBoolean();
                
                if (isCompleted)
                {
                    await MoveToNextWord();
                }
                
                totalErrors = await JS.InvokeAsync<int>("window.trainInterop.getErrorCount");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleInput: {ex.Message}");
        }
    }
}
