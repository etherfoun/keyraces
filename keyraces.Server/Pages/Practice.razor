@page "/practice"
@using System.Timers
@using System.Text
@using System.Text.Json
@using keyraces.Core.Entities
@using keyraces.Core.Interfaces
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Collections.Generic
@using System.Text.Json.Serialization
@inject ITextSnippetService TextSnippetService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="practice-container" data-language="@language">
    @if (isLoading)
    {
        <div class="loading-overlay">
            <div class="loading-spinner"></div>
            <div class="loading-text">Loading dictionaries...</div>
        </div>
    }
    <div class="metrics-bar">
        <div class="metrics-group">
            <span class="metrics-label">Metrics:</span>
            <span class="metrics-item">Speed: <span class="metrics-value">@wpm.ToString("0.0")</span> wpm (<span class="metrics-value">@rawWpm.ToString("0.0")</span> wpm)</span>
            <span class="metrics-item">Accuracy: <span class="metrics-value">@accuracy.ToString("0")</span>%</span>
            <span class="metrics-item">Score: <span class="metrics-value">@score</span></span>
        </div>
        <div class="controls-group">
            <button class="icon-button" title="Help" @onclick="ShowHelp">
                <span class="icon">?</span>
            </button>
            <button class="icon-button" title="Restart" @onclick="RestartPractice">
                <span class="icon">↺</span>
            </button>
            <button class="icon-button" title="Previous" @onclick="PreviousPractice">
                <span class="icon">←</span>
            </button>
            <button class="icon-button" title="Next" @onclick="NextPractice">
                <span class="icon">→</span>
            </button>
            <button class="icon-button" title="Fullscreen" @onclick="ToggleFullscreen">
                <span class="icon">⛶</span>
            </button>
            <button class="settings-button" @onclick="OpenSettings">
                <span class="icon">⚙</span> SETTINGS
            </button>
        </div>
    </div>

    <div class="practice-info">
        <div class="info-row">
            <span class="info-label">All keys:</span>
            <div class="keys-list">
                @foreach (var key in GetCurrentLanguageKeys())
                {
                    <span class="key-badge @(key == currentKey ? "current" : "")">@key</span>
                }
            </div>
        </div>
        <div class="info-row">
            <span class="info-label">Current key:</span>
            <span class="key-badge current">@currentKey</span>
            <span class="info-text">@currentKeyStatus</span>
        </div>
        <div class="info-row">
            <span class="info-label">Accuracy:</span>
            <span class="info-text">@accuracyStatus</span>
        </div>
    </div>

    <div class="typing-area" tabindex="0" @ref="typingAreaRef" @onkeydown="HandleKeyDown" @onkeypress="HandleKeyPress" @onkeyup="HandleKeyUp" @onfocus="HandleFocus" @onblur="HandleBlur">
        <div class="text-display">
            <div class="target-text">
                @for (int i = 0; i < practiceText.Length; i++)
                {
                    char c = practiceText[i];
                    string charClass = "";

                    if (i < typedText.Length)
                    {
                        charClass = typedText[i] == c ? "correct" : "incorrect";
                    }
                    else if (i == typedText.Length)
                    {
                        charClass = "current";
                    }

                    if (c == ' ')
                    {
                        <span class="@charClass space-dot"></span>
                    }
                    else
                    {
                        <span class="@charClass">@c</span>
                    }
                }
            </div>
            <div class="typed-text">
                @typedText
            </div>
        </div>
        <div class="typing-prompt @(isFocused ? "focused" : "")">
            Click here and start typing...
        </div>
    </div>

    <div class="keyboard-container">
        <div class="keyboard @keyboardLayout">
            @if (language == "english" && keyboardLayout == "qwerty")
            {
                <div class="keyboard-row">
                    <div class="key @GetKeyClass('`')" data-key="`"><span class="key-char">`</span></div>
                    <div class="key @GetKeyClass('1')" data-key="1"><span class="key-char">1</span></div>
                    <div class="key @GetKeyClass('2')" data-key="2"><span class="key-char">2</span></div>
                    <div class="key @GetKeyClass('3')" data-key="3"><span class="key-char">3</span></div>
                    <div class="key @GetKeyClass('4')" data-key="4"><span class="key-char">4</span></div>
                    <div class="key @GetKeyClass('5')" data-key="5"><span class="key-char">5</span></div>
                    <div class="key @GetKeyClass('6')" data-key="6"><span class="key-char">6</span></div>
                    <div class="key @GetKeyClass('7')" data-key="7"><span class="key-char">7</span></div>
                    <div class="key @GetKeyClass('8')" data-key="8"><span class="key-char">8</span></div>
                    <div class="key @GetKeyClass('9')" data-key="9"><span class="key-char">9</span></div>
                    <div class="key @GetKeyClass('0')" data-key="0"><span class="key-char">0</span></div>
                    <div class="key @GetKeyClass('-')" data-key="-"><span class="key-char">-</span></div>
                    <div class="key @GetKeyClass('=')" data-key="="><span class="key-char">=</span></div>
                    <div class="key backspace" data-key="Backspace"><span class="key-char">Backspace</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key tab" data-key="Tab"><span class="key-char">Tab</span></div>
                    <div class="key @GetKeyClass('q')" data-key="q"><span class="key-char">Q</span></div>
                    <div class="key @GetKeyClass('w')" data-key="w"><span class="key-char">W</span></div>
                    <div class="key @GetKeyClass('e')" data-key="e"><span class="key-char">E</span></div>
                    <div class="key @GetKeyClass('r')" data-key="r"><span class="key-char">R</span></div>
                    <div class="key @GetKeyClass('t')" data-key="t"><span class="key-char">T</span></div>
                    <div class="key @GetKeyClass('y')" data-key="y"><span class="key-char">Y</span></div>
                    <div class="key @GetKeyClass('u')" data-key="u"><span class="key-char">U</span></div>
                    <div class="key @GetKeyClass('i')" data-key="i"><span class="key-char">I</span></div>
                    <div class="key @GetKeyClass('o')" data-key="o"><span class="key-char">O</span></div>
                    <div class="key @GetKeyClass('p')" data-key="p"><span class="key-char">P</span></div>
                    <div class="key @GetKeyClass('[')" data-key="["><span class="key-char">[</span></div>
                    <div class="key @GetKeyClass(']')" data-key="]"><span class="key-char">]</span></div>
                    <div class="key backslash" data-key="\"><span class="key-char">\</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key caps" data-key="CapsLock"><span class="key-char">Caps</span></div>
                    <div class="key @GetKeyClass('a')" data-key="a"><span class="key-char">A</span></div>
                    <div class="key @GetKeyClass('s')" data-key="s"><span class="key-char">S</span></div>
                    <div class="key @GetKeyClass('d')" data-key="d"><span class="key-char">D</span></div>
                    <div class="key @GetKeyClass('f')" data-key="f"><span class="key-char">F</span></div>
                    <div class="key @GetKeyClass('g')" data-key="g"><span class="key-char">G</span></div>
                    <div class="key @GetKeyClass('h')" data-key="h"><span class="key-char">H</span></div>
                    <div class="key @GetKeyClass('j')" data-key="j"><span class="key-char">J</span></div>
                    <div class="key @GetKeyClass('k')" data-key="k"><span class="key-char">K</span></div>
                    <div class="key @GetKeyClass('l')" data-key="l"><span class="key-char">L</span></div>
                    <div class="key @GetKeyClass(';')" data-key=";"><span class="key-char">;</span></div>
                    <div class="key @GetKeyClass('\'')" data-key="'"><span class="key-char">'</span></div>
                    <div class="key enter" data-key="Enter"><span class="key-char">Enter</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key shift left-shift" data-key="ShiftLeft"><span class="key-char">Shift</span></div>
                    <div class="key @GetKeyClass('z')" data-key="z"><span class="key-char">Z</span></div>
                    <div class="key @GetKeyClass('x')" data-key="x"><span class="key-char">X</span></div>
                    <div class="key @GetKeyClass('c')" data-key="c"><span class="key-char">C</span></div>
                    <div class="key @GetKeyClass('v')" data-key="v"><span class="key-char">V</span></div>
                    <div class="key @GetKeyClass('b')" data-key="b"><span class="key-char">B</span></div>
                    <div class="key @GetKeyClass('n')" data-key="n"><span class="key-char">N</span></div>
                    <div class="key @GetKeyClass('m')" data-key="m"><span class="key-char">M</span></div>
                    <div class="key @GetKeyClass(',')" data-key=","><span class="key-char">,</span></div>
                    <div class="key @GetKeyClass('.')" data-key="."><span class="key-char">.</span></div>
                    <div class="key @GetKeyClass('/')" data-key="/"><span class="key-char">/</span></div>
                    <div class="key shift right-shift" data-key="ShiftRight"><span class="key-char">Shift</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key ctrl left-ctrl" data-key="ControlLeft"><span class="key-char">Ctrl</span></div>
                    <div class="key win" data-key="MetaLeft"><span class="key-char">Win</span></div>
                    <div class="key alt" data-key="AltLeft"><span class="key-char">Alt</span></div>
                    <div class="key space @GetKeyClass(' ')" data-key=" "><span class="key-char"></span></div>
                    <div class="key alt" data-key="AltRight"><span class="key-char">Alt</span></div>
                    <div class="key win" data-key="MetaRight"><span class="key-char">Win</span></div>
                    <div class="key menu" data-key="ContextMenu"><span class="key-char">Menu</span></div>
                    <div class="key ctrl right-ctrl" data-key="ControlRight"><span class="key-char">Ctrl</span></div>
                </div>
            }
            else if (language == "english" && keyboardLayout == "dvorak")
            {
                <div class="keyboard-row">
                    <div class="key @GetKeyClass('`')" data-key="`"><span class="key-char">`</span></div>
                    <div class="key @GetKeyClass('1')" data-key="1"><span class="key-char">1</span></div>
                    <div class="key @GetKeyClass('2')" data-key="2"><span class="key-char">2</span></div>
                    <div class="key @GetKeyClass('3')" data-key="3"><span class="key-char">3</span></div>
                    <div class="key @GetKeyClass('4')" data-key="4"><span class="key-char">4</span></div>
                    <div class="key @GetKeyClass('5')" data-key="5"><span class="key-char">5</span></div>
                    <div class="key @GetKeyClass('6')" data-key="6"><span class="key-char">6</span></div>
                    <div class="key @GetKeyClass('7')" data-key="7"><span class="key-char">7</span></div>
                    <div class="key @GetKeyClass('8')" data-key="8"><span class="key-char">8</span></div>
                    <div class="key @GetKeyClass('9')" data-key="9"><span class="key-char">9</span></div>
                    <div class="key @GetKeyClass('0')" data-key="0"><span class="key-char">0</span></div>
                    <div class="key @GetKeyClass('[')" data-key="["><span class="key-char">[</span></div>
                    <div class="key @GetKeyClass(']')" data-key="]"><span class="key-char">]</span></div>
                    <div class="key backspace" data-key="Backspace"><span class="key-char">Backspace</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key tab" data-key="Tab"><span class="key-char">Tab</span></div>
                    <div class="key @GetKeyClass('\'')" data-key="'"><span class="key-char">'</span></div>
                    <div class="key @GetKeyClass(',')" data-key=","><span class="key-char">,</span></div>
                    <div class="key @GetKeyClass('.')" data-key="."><span class="key-char">.</span></div>
                    <div class="key @GetKeyClass('p')" data-key="p"><span class="key-char">P</span></div>
                    <div class="key @GetKeyClass('y')" data-key="y"><span class="key-char">Y</span></div>
                    <div class="key @GetKeyClass('f')" data-key="f"><span class="key-char">F</span></div>
                    <div class="key @GetKeyClass('g')" data-key="g"><span class="key-char">G</span></div>
                    <div class="key @GetKeyClass('c')" data-key="c"><span class="key-char">C</span></div>
                    <div class="key @GetKeyClass('r')" data-key="r"><span class="key-char">R</span></div>
                    <div class="key @GetKeyClass('l')" data-key="\"><span class="key-char">\</span></div>
                    <div class="key @GetKeyClass('/')" data-key="/"><span class="key-char">\</span></div>
                    <div class="key @GetKeyClass('=')" data-key="="><span class="key-char">=</span></div>
                    <div class="key backslash" data-key="\"><span class="key-char">\</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key caps" data-key="CapsLock"><span class="key-char">Caps</span></div>
                    <div class="key @GetKeyClass('a')" data-key="a"><span class="key-char">A</span></div>
                    <div class="key @GetKeyClass('o')" data-key="o"><span class="key-char">O</span></div>
                    <div class="key @GetKeyClass('e')" data-key="e"><span class="key-char">E</span></div>
                    <div class="key @GetKeyClass('u')" data-key="u"><span class="key-char">U</span></div>
                    <div class="key @GetKeyClass('i')" data-key="i"><span class="key-char">I</span></div>
                    <div class="key @GetKeyClass('d')" data-key="d"><span class="key-char">D</span></div>
                    <div class="key @GetKeyClass('h')" data-key="h"><span class="key-char">H</span></div>
                    <div class="key @GetKeyClass('t')" data-key="t"><span class="key-char">T</span></div>
                    <div class="key @GetKeyClass('n')" data-key="n"><span class="key-char">N</span></div>
                    <div class="key @GetKeyClass('s')" data-key="s"><span class="key-char">S</span></div>
                    <div class="key @GetKeyClass('-')" data-key="-"><span class="key-char">-</span></div>
                    <div class="key enter" data-key="Enter"><span class="key-char">Enter</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key shift left-shift" data-key="ShiftLeft"><span class="key-char">Shift</span></div>
                    <div class="key @GetKeyClass(';')" data-key=";"><span class="key-char">;</span></div>
                    <div class="key @GetKeyClass('q')" data-key="q"><span class="key-char">Q</span></div>
                    <div class="key @GetKeyClass('j')" data-key="j"><span class="key-char">J</span></div>
                    <div class="key @GetKeyClass('k')" data-key="k"><span class="key-char">K</span></div>
                    <div class="key @GetKeyClass('x')" data-key="x"><span class="key-char">X</span></div>
                    <div class="key @GetKeyClass('b')" data-key="b"><span class="key-char">B</span></div>
                    <div class="key @GetKeyClass('m')" data-key="m"><span class="key-char">M</span></div>
                    <div class="key @GetKeyClass('w')" data-key="w"><span class="key-char">W</span></div>
                    <div class="key @GetKeyClass('v')" data-key="v"><span class="key-char">V</span></div>
                    <div class="key @GetKeyClass('z')" data-key="z"><span class="key-char">Z</span></div>
                    <div class="key shift right-shift" data-key="ShiftRight"><span class="key-char">Shift</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key ctrl left-ctrl" data-key="ControlLeft"><span class="key-char">Ctrl</span></div>
                    <div class="key win" data-key="MetaLeft"><span class="key-char">Win</span></div>
                    <div class="key alt" data-key="AltLeft"><span class="key-char">Alt</span></div>
                    <div class="key space @GetKeyClass(' ')" data-key=" "><span class="key-char"></span></div>
                    <div class="key alt" data-key="AltRight"><span class="key-char">Alt</span></div>
                    <div class="key win" data-key="MetaRight"><span class="key-char">Win</span></div>
                    <div class="key menu" data-key="ContextMenu"><span class="key-char">Menu</span></div>
                    <div class="key ctrl right-ctrl" data-key="ControlRight"><span class="key-char">Ctrl</span></div>
                </div>
            }
            else if (language == "russian")
            {
                <div class="keyboard-row">
                    <div class="key @GetKeyClass('ё')" data-key="ё"><span class="key-char">Ё</span></div>
                    <div class="key @GetKeyClass('1')" data-key="1"><span class="key-char">1</span></div>
                    <div class="key @GetKeyClass('2')" data-key="2"><span class="key-char">2</span></div>
                    <div class="key @GetKeyClass('3')" data-key="3"><span class="key-char">3</span></div>
                    <div class="key @GetKeyClass('4')" data-key="4"><span class="key-char">4</span></div>
                    <div class="key @GetKeyClass('5')" data-key="5"><span class="key-char">5</span></div>
                    <div class="key @GetKeyClass('6')" data-key="6"><span class="key-char">6</span></div>
                    <div class="key @GetKeyClass('7')" data-key="7"><span class="key-char">7</span></div>
                    <div class="key @GetKeyClass('8')" data-key="8"><span class="key-char">8</span></div>
                    <div class="key @GetKeyClass('9')" data-key="9"><span class="key-char">9</span></div>
                    <div class="key @GetKeyClass('0')" data-key="0"><span class="key-char">0</span></div>
                    <div class="key @GetKeyClass('-')" data-key="-"><span class="key-char">-</span></div>
                    <div class="key @GetKeyClass('=')" data-key="="><span class="key-char">=</span></div>
                    <div class="key backspace" data-key="Backspace"><span class="key-char">Backspace</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key tab" data-key="Tab"><span class="key-char">Tab</span></div>
                    <div class="key @GetKeyClass('й')" data-key="й"><span class="key-char">Й</span></div>
                    <div class="key @GetKeyClass('ц')" data-key="ц"><span class="key-char">Ц</span></div>
                    <div class="key @GetKeyClass('у')" data-key="у"><span class="key-char">У</span></div>
                    <div class="key @GetKeyClass('к')" data-key="к"><span class="key-char">К</span></div>
                    <div class="key @GetKeyClass('е')" data-key="е"><span class="key-char">Е</span></div>
                    <div class="key @GetKeyClass('н')" data-key="н"><span class="key-char">Н</span></div>
                    <div class="key @GetKeyClass('г')" data-key="г"><span class="key-char">Г</span></div>
                    <div class="key @GetKeyClass('ш')" data-key="ш"><span class="key-char">Ш</span></div>
                    <div class="key @GetKeyClass('щ')" data-key="щ"><span class="key-char">Щ</span></div>
                    <div class="key @GetKeyClass('з')" data-key="з"><span class="key-char">З</span></div>
                    <div class="key @GetKeyClass('х')" data-key="х"><span class="key-char">Х</span></div>
                    <div class="key @GetKeyClass('ъ')" data-key="ъ"><span class="key-char">Ъ</span></div>
                    <div class="key backslash" data-key="\"><span class="key-char">\</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key caps" data-key="CapsLock"><span class="key-char">Caps</span></div>
                    <div class="key @GetKeyClass('ф')" data-key="ф"><span class="key-char">Ф</span></div>
                    <div class="key @GetKeyClass('ы')" data-key="ы"><span class="key-char">Ы</span></div>
                    <div class="key @GetKeyClass('в')" data-key="в"><span class="key-char">В</span></div>
                    <div class="key @GetKeyClass('а')" data-key="а"><span class="key-char">А</span></div>
                    <div class="key @GetKeyClass('п')" data-key="п"><span class="key-char">П</span></div>
                    <div class="key @GetKeyClass('р')" data-key="р"><span class="key-char">Р</span></div>
                    <div class="key @GetKeyClass('о')" data-key="о"><span class="key-char">О</span></div>
                    <div class="key @GetKeyClass('л')" data-key="л"><span class="key-char">Л</span></div>
                    <div class="key @GetKeyClass('д')" data-key="д"><span class="key-char">Д</span></div>
                    <div class="key @GetKeyClass('ж')" data-key="ж"><span class="key-char">Ж</span></div>
                    <div class="key @GetKeyClass('э')" data-key="э"><span class="key-char">Э</span></div>
                    <div class="key enter" data-key="Enter"><span class="key-char">Enter</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key shift left-shift" data-key="ShiftLeft"><span class="key-char">Shift</span></div>
                    <div class="key @GetKeyClass('я')" data-key="я"><span class="key-char">Я</span></div>
                    <div class="key @GetKeyClass('ч')" data-key="ч"><span class="key-char">Ч</span></div>
                    <div class="key @GetKeyClass('с')" data-key="с"><span class="key-char">С</span></div>
                    <div class="key @GetKeyClass('м')" data-key="м"><span class="key-char">М</span></div>
                    <div class="key @GetKeyClass('и')" data-key="и"><span class="key-char">И</span></div>
                    <div class="key @GetKeyClass('т')" data-key="т"><span class="key-char">Т</span></div>
                    <div class="key @GetKeyClass('ь')" data-key="ь"><span class="key-char">Ь</span></div>
                    <div class="key @GetKeyClass('б')" data-key="б"><span class="key-char">Б</span></div>
                    <div class="key @GetKeyClass('ю')" data-key="ю"><span class="key-char">Ю</span></div>
                    <div class="key @GetKeyClass('.')" data-key="."><span class="key-char">.</span></div>
                    <div class="key shift right-shift" data-key="ShiftRight"><span class="key-char">Shift</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key ctrl left-ctrl" data-key="ControlLeft"><span class="key-char">Ctrl</span></div>
                    <div class="key win" data-key="MetaLeft"><span class="key-char">Win</span></div>
                    <div class="key alt" data-key="AltLeft"><span class="key-char">Alt</span></div>
                    <div class="key space @GetKeyClass(' ')" data-key=" "><span class="key-char"></span></div>
                    <div class="key alt" data-key="AltRight"><span class="key-char">Alt</span></div>
                    <div class="key win" data-key="MetaRight"><span class="key-char">Win</span></div>
                    <div class="key menu" data-key="ContextMenu"><span class="key-char">Menu</span></div>
                    <div class="key ctrl right-ctrl" data-key="ControlRight"><span class="key-char">Ctrl</span></div>
                </div>
            }
            else if (language == "ukrainian")
            {
                <div class="keyboard-row">
                    <div class="key @GetKeyClass('`')" data-key="`"><span class="key-char">`</span></div>
                    <div class="key @GetKeyClass('1')" data-key="1"><span class="key-char">1</span></div>
                    <div class="key @GetKeyClass('2')" data-key="2"><span class="key-char">2</span></div>
                    <div class="key @GetKeyClass('3')" data-key="3"><span class="key-char">3</span></div>
                    <div class="key @GetKeyClass('4')" data-key="4"><span class="key-char">4</span></div>
                    <div class="key @GetKeyClass('5')" data-key="5"><span class="key-char">5</span></div>
                    <div class="key @GetKeyClass('6')" data-key="6"><span class="key-char">6</span></div>
                    <div class="key @GetKeyClass('7')" data-key="7"><span class="key-char">7</span></div>
                    <div class="key @GetKeyClass('8')" data-key="8"><span class="key-char">8</span></div>
                    <div class="key @GetKeyClass('9')" data-key="9"><span class="key-char">9</span></div>
                    <div class="key @GetKeyClass('0')" data-key="0"><span class="key-char">0</span></div>
                    <div class="key @GetKeyClass('-')" data-key="-"><span class="key-char">-</span></div>
                    <div class="key @GetKeyClass('=')" data-key="="><span class="key-char">=</span></div>
                    <div class="key backspace" data-key="Backspace"><span class="key-char">Backspace</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key tab" data-key="Tab"><span class="key-char">Tab</span></div>
                    <div class="key @GetKeyClass('й')" data-key="й"><span class="key-char">Й</span></div>
                    <div class="key @GetKeyClass('ц')" data-key="ц"><span class="key-char">Ц</span></div>
                    <div class="key @GetKeyClass('у')" data-key="у"><span class="key-char">У</span></div>
                    <div class="key @GetKeyClass('к')" data-key="к"><span class="key-char">К</span></div>
                    <div class="key @GetKeyClass('е')" data-key="е"><span class="key-char">Е</span></div>
                    <div class="key @GetKeyClass('н')" data-key="н"><span class="key-char">Н</span></div>
                    <div class="key @GetKeyClass('г')" data-key="г"><span class="key-char">Г</span></div>
                    <div class="key @GetKeyClass('ш')" data-key="ш"><span class="key-char">Ш</span></div>
                    <div class="key @GetKeyClass('щ')" data-key="щ"><span class="key-char">Щ</span></div>
                    <div class="key @GetKeyClass('з')" data-key="з"><span class="key-char">З</span></div>
                    <div class="key @GetKeyClass('х')" data-key="х"><span class="key-char">Х</span></div>
                    <div class="key @GetKeyClass('ї')" data-key="ї"><span class="key-char">Ї</span></div>
                    <div class="key backslash" data-key="\"><span class="key-char">\</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key caps" data-key="CapsLock"><span class="key-char">Caps</span></div>
                    <div class="key @GetKeyClass('ф')" data-key="ф"><span class="key-char">Ф</span></div>
                    <div class="key @GetKeyClass('и')" data-key="и"><span class="key-char">И</span></div>
                    <div class="key @GetKeyClass('в')" data-key="в"><span class="key-char">В</span></div>
                    <div class="key @GetKeyClass('а')" data-key="а"><span class="key-char">А</span></div>
                    <div class="key @GetKeyClass('п')" data-key="п"><span class="key-char">П</span></div>
                    <div class="key @GetKeyClass('р')" data-key="р"><span class="key-char">Р</span></div>
                    <div class="key @GetKeyClass('о')" data-key="о"><span class="key-char">О</span></div>
                    <div class="key @GetKeyClass('л')" data-key="л"><span class="key-char">Л</span></div>
                    <div class="key @GetKeyClass('д')" data-key="д"><span class="key-char">Д</span></div>
                    <div class="key @GetKeyClass('ж')" data-key="ж"><span class="key-char">Ж</span></div>
                    <div class="key @GetKeyClass('є')" data-key="є"><span class="key-char">Є</span></div>
                    <div class="key enter" data-key="Enter"><span class="key-char">Enter</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key shift left-shift" data-key="ShiftLeft"><span class="key-char">Shift</span></div>
                    <div class="key @GetKeyClass('я')" data-key="я"><span class="key-char">Я</span></div>
                    <div class="key @GetKeyClass('ч')" data-key="ч"><span class="key-char">Ч</span></div>
                    <div class="key @GetKeyClass('с')" data-key="с"><span class="key-char">С</span></div>
                    <div class="key @GetKeyClass('м')" data-key="м"><span class="key-char">М</span></div>
                    <div class="key @GetKeyClass('і')" data-key="і"><span class="key-char">І</span></div>
                    <div class="key @GetKeyClass('т')" data-key="т"><span class="key-char">Т</span></div>
                    <div class="key @GetKeyClass('ь')" data-key="ь"><span class="key-char">Ь</span></div>
                    <div class="key @GetKeyClass('б')" data-key="б"><span class="key-char">Б</span></div>
                    <div class="key @GetKeyClass('ю')" data-key="ю"><span class="key-char">Ю</span></div>
                    <div class="key @GetKeyClass('.')" data-key="."><span class="key-char">.</span></div>
                    <div class="key shift right-shift" data-key="ShiftRight"><span class="key-char">Shift</span></div>
                </div>
                <div class="keyboard-row">
                    <div class="key ctrl left-ctrl" data-key="ControlLeft"><span class="key-char">Ctrl</span></div>
                    <div class="key win" data-key="MetaLeft"><span class="key-char">Win</span></div>
                    <div class="key alt" data-key="AltLeft"><span class="key-char">Alt</span></div>
                    <div class="key space @GetKeyClass(' ')" data-key=" "><span class="key-char"></span></div>
                    <div class="key alt" data-key="AltRight"><span class="key-char">Alt</span></div>
                    <div class="key win" data-key="MetaLeft"><span class="key-char">Win</span></div>
                    <div class="key menu" data-key="ContextMenu"><span class="key-char">Menu</span></div>
                    <div class="key ctrl right-ctrl" data-key="ControlRight"><span class="key-char">Ctrl</span></div>
                </div>
            }
        </div>
    </div>

    @if (showSettings)
    {
        <div class="settings-modal">
            <div class="settings-content">
                <div class="settings-header">
                    <h2>Settings</h2>
                    <button class="close-button" @onclick="CloseSettings">×</button>
                </div>
                <div class="settings-body">
                    <div class="settings-section">
                        <h3>Language</h3>
                        <div class="settings-option">
                            <select @bind="language">
                                <option value="english">English</option>
                                <option value="russian">Русский</option>
                                <option value="ukrainian">Українська</option>
                            </select>
                        </div>
                    </div>
                    <div class="settings-section">
                        <h3>Keyboard Layout</h3>
                        <div class="settings-option">
                            @if (language == "english")
                            {
                                <select @bind="keyboardLayout">
                                    <option value="qwerty">QWERTY</option>
                                    <option value="dvorak">Dvorak</option>
                                    <option value="colemak">Colemak</option>
                                </select>
                            }
                            else
                            {
                                <select disabled>
                                    <option value="standard">Standard</option>
                                </select>
                                <div class="settings-note">Keyboard layout is fixed for selected language</div>
                            }
                        </div>
                    </div>
                </div>
                <div class="settings-footer">
                    <button class="settings-button save" @onclick="SaveSettings">Save</button>
                    <button class="settings-button cancel" @onclick="CloseSettings">Cancel</button>
                </div>
            </div>
        </div>
    }

    @if (showHelp)
    {
        <div class="help-modal">
            <div class="help-content">
                <div class="help-header">
                    <h2>Help</h2>
                    <button class="close-button" @onclick="CloseHelp">×</button>
                </div>
                <div class="help-body">
                    <h3>How to Practice</h3>
                    <p>Click on the typing area and start typing the words shown. The current key to focus on will be highlighted.</p>

                    <h3>Keyboard Shortcuts</h3>
                    <ul>
                        <li><strong>Esc</strong> - Reset current practice</li>
                        <li><strong>Ctrl+Enter</strong> - Start new practice</li>
                        <li><strong>F11</strong> - Toggle fullscreen</li>
                    </ul>

                    <h3>Metrics</h3>
                    <p><strong>WPM</strong> - Words Per Minute, measures your typing speed</p>
                    <p><strong>Accuracy</strong> - Percentage of correctly typed characters</p>
                    <p><strong>Score</strong> - Points earned based on speed and accuracy</p>
                </div>
            </div>
        </div>
    }

    @if (showStatistics)
    {
        <div class="statistics-modal">
            <div class="statistics-content">
                <div class="statistics-header">
                    <h2>@GetLocalizedText("Statistics")</h2>
                    <button class="close-button" @onclick="CloseStatistics">×</button>
                </div>
                <div class="statistics-body">
                    <h3>@GetLocalizedText("Overall Results")</h3>
                    <div class="statistics-row">
                        <span class="statistics-label">@GetLocalizedText("Average Accuracy"):</span>
                        <span class="statistics-value">@averageAccuracy.ToString("0")</span>
                    </div>
                    <div class="statistics-row">
                        <span class="statistics-label">@GetLocalizedText("Average Speed"):</span>
                        <span class="statistics-value">@averageWpm.ToString("0.0")</span>
                    </div>
                    <div class="statistics-row">
                        <span class="statistics-label">@GetLocalizedText("Total Score"):</span>
                        <span class="statistics-value">@totalScore</span>
                    </div>

                    <h3>@GetLocalizedText("Keys to Practice")</h3>
                    <div class="keys-to-practice">
                        @foreach (var key in keysToImprove)
                        {
                            <span class="key-badge">@key</span>
                        }
                    </div>

                    <div class="statistics-message">
                        @GetLocalizedText("Practice Recommendation")
                    </div>

                    <div class="statistics-actions">
                        <button class="settings-button" @onclick="RestartAllPractice">
                            @GetLocalizedText("Practice Again")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showAccuracyFeedback)
    {
        <div class="feedback-modal">
            <div class="feedback-content">
                <div class="feedback-header">
                    <h2>@GetLocalizedText("Practice Complete")</h2>
                    <button class="close-button" @onclick="CloseFeedback">×</button>
                </div>
                <div class="feedback-body">
                    <h3>@GetLocalizedText("Results for key") @currentKey</h3>
                    <div class="feedback-row">
                        <span class="feedback-label">@GetLocalizedText("Accuracy"):</span>
                        <span class="feedback-value">@accuracy.ToString("0")%</span>
                    </div>
                    <div class="feedback-row">
                        <span class="feedback-label">@GetLocalizedText("Speed"):</span>
                        <span class="feedback-value">@wpm.ToString("0.0") WPM</span>
                    </div>
                    <div class="feedback-row">
                        <span class="feedback-label">@GetLocalizedText("Score"):</span>
                        <span class="feedback-value">@score</span>
                    </div>

                    <div class="feedback-message">
                        @accuracyFeedbackMessage
                    </div>

                    <div class="feedback-timer">
                        @GetLocalizedText("Next key in") @nextKeyCountdown @GetLocalizedText("seconds")...
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private ElementReference typingAreaRef;
    private Timer practiceTimer;
    private DateTime startTime;
    private bool isPracticeActive = false;
    private bool isFocused = false;
    private bool showSettings = false;
    private bool showHelp = false;
    private bool isLoading = true;
    private string keyboardLayout = "qwerty";
    private string language = "english";

    private string tempKeyboardLayout;
    private string tempLanguage;

    private double wpm = 0;
    private double rawWpm = 0;
    private int accuracy = 0;
    private int score = 0;
    private int practiceTime = 0;

    private int totalKeysPressed = 0;
    private int correctKeysPressed = 0;

    private char currentKey = 'e';
    private string currentKeyStatus = "Not calibrated, need more samples.";
    private string accuracyStatus = "No accuracy streaks.";
    private List<string> practiceWords = new List<string>();

    private string practiceText = "";
    private string typedText = "";
    private int currentPosition = 0;
    private bool isCompleted = false;

    private Random random = new Random();

    private Dictionary<string, char[]> languageKeys = new Dictionary<string, char[]>
    {
        { "english", new char[] { 'e', 'n', 'i', 'a', 'r', 'l', 't', 'o', 's', 'u', 'd', 'y', 'c', 'g', 'h', 'p', 'k', 'b', 'm', 'f', 'z', 'v', 'x', 'q', 'j' } },
        { "russian", new char[] { 'о', 'а', 'е', 'и', 'н', 'т', 'р', 'с', 'л', 'в', 'к', 'м', 'д', 'п', 'у', 'я', 'ы', 'ь', 'г', 'з', 'б', 'ч', 'й', 'х', 'ж', 'ш', 'ю', 'ц', 'щ', 'э', 'ф', 'ъ', 'ё' } },
        { "ukrainian", new char[] { 'о', 'а', 'е', 'и', 'і', 'н', 'т', 'р', 'с', 'л', 'в', 'к', 'м', 'д', 'п', 'у', 'я', 'ь', 'г', 'з', 'б', 'ч', 'й', 'х', 'ж', 'ш', 'ю', 'ц', 'щ', 'є', 'ф', 'ї' } }
    };

    private Dictionary<string, Dictionary<char, List<string>>> languagePracticeWords = new Dictionary<string, Dictionary<char, List<string>>>();

    private HashSet<string> pressedKeys = new HashSet<string>();
    private Dictionary<char, int> keyHeatMap = new Dictionary<char, int>();
    private char? highlightedKey = null;

    private bool showStatistics = false;
    private bool showAccuracyFeedback = false;
    private int nextKeyCountdown = 5;
    private Timer feedbackTimer;
    private string accuracyFeedbackMessage = "";
    private double averageAccuracy = 0;
    private double averageWpm = 0;
    private int totalScore = 0;
    private List<char> keysToImprove = new List<char>();
    private Dictionary<char, KeyStatistics> keyStatistics = new Dictionary<char, KeyStatistics>();
    private int completedKeysCount = 0;
    private bool isAllKeysCompleted = false;

    private class KeyStatistics
    {
        public double Accuracy { get; set; }
        public double Wpm { get; set; }
        public int Score { get; set; }
        public bool IsCompleted { get; set; } = false;
    }

    protected override async Task OnInitializedAsync()
    {
        practiceTimer = new Timer(1000);
        practiceTimer.Elapsed += OnPracticeTimerElapsed;

        foreach (var key in GetCurrentLanguageKeys())
        {
            keyHeatMap[key] = 0;
        }

        currentKey = GetCurrentLanguageKeys()[0];
        highlightedKey = currentKey;

        languagePracticeWords["english"] = new Dictionary<char, List<string>>();
        languagePracticeWords["russian"] = new Dictionary<char, List<string>>();
        languagePracticeWords["ukrainian"] = new Dictionary<char, List<string>>();

        GeneratePracticeWords();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
            document.querySelector('.typing-area').id = 'typing-area';
            ");

                bool functionExists = await JSRuntime.InvokeAsync<bool>("eval", @"
            typeof window.keyboardInterop !== 'undefined' &&
            typeof window.keyboardInterop.disableScroll === 'function'
            ");

                if (functionExists)
                {
                    await JSRuntime.InvokeVoidAsync("keyboardInterop.disableScroll");
                }

                await JSRuntime.InvokeVoidAsync("eval", @"
            async function checkFileExists(url) {
                try {
                    const response = await fetch(url, { method: 'HEAD' });
                    console.log(`File ${url} exists: ${response.ok}, status: ${response.status}`);
                    return response.ok;
                } catch (error) {
                    console.error(`Error checking file ${url}:`, error);
                    return false;
                }
            }

            checkFileExists('/data/english-words.json');
            checkFileExists('/data/russian-words.json');
            checkFileExists('/data/ukrainian-words.json');
            ");

                await LoadSettingsFromLocalStorage();

                await InitializeLanguagePracticeWords();

                isLoading = false;

                GeneratePracticeWords();

                StateHasChanged();

                await FocusTypingArea();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JavaScript interop error: {ex.Message}");
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task InitializeLanguagePracticeWords()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            languagePracticeWords["english"] = new Dictionary<char, List<string>>();
            languagePracticeWords["russian"] = new Dictionary<char, List<string>>();
            languagePracticeWords["ukrainian"] = new Dictionary<char, List<string>>();

            var loadTasks = new List<Task>
        {
            LoadDictionary("english", "/data/english-words.json"),
            LoadDictionary("russian", "/data/russian-words.json"),
            LoadDictionary("ukrainian", "/data/ukrainian-words.json")
        };

            var completedTask = await Task.WhenAny(
                Task.WhenAll(loadTasks),
                Task.Delay(10000)
            );

            bool anyDictionaryLoaded = languagePracticeWords["english"].Count > 0 ||
                                      languagePracticeWords["russian"].Count > 0 ||
                                      languagePracticeWords["ukrainian"].Count > 0;

            if (!anyDictionaryLoaded)
            {
                Console.WriteLine("No dictionaries loaded, using basic dictionaries");
                InitializeBasicDictionaries();
            }
            else
            {
                Console.WriteLine($"English dictionary: {languagePracticeWords["english"].Count} keys");
                Console.WriteLine($"Russian dictionary: {languagePracticeWords["russian"].Count} keys");
                Console.WriteLine($"Ukrainian dictionary: {languagePracticeWords["ukrainian"].Count} keys");
            }

            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in InitializeLanguagePracticeWords: {ex.Message}");

            InitializeBasicDictionaries();

            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeBasicDictionaries()
    {
        var fallbackEnglishWords = new Dictionary<char, List<string>>
    {
        { 'e', new List<string> { "the", "when", "here", "there", "where", "these", "theme", "every", "enter" } },
        { 'a', new List<string> { "and", "that", "have", "what", "about", "after", "again", "always" } },
        { 'i', new List<string> { "this", "with", "will", "time", "like", "think", "which" } },
        { 'o', new List<string> { "you", "your", "not", "for", "from", "more", "other", "only" } },
        { 'n', new List<string> { "and", "not", "can", "now", "new", "next", "need", "never" } }
    };

        var fallbackRussianWords = new Dictionary<char, List<string>>
    {
        { 'о', new List<string> { "что", "это", "его", "того", "много", "слово", "город" } },
        { 'а', new List<string> { "так", "как", "она", "сказал", "глаза", "стал", "надо" } },
        { 'е', new List<string> { "все", "уже", "тебе", "себе", "время", "дело", "место" } },
        { 'и', new List<string> { "или", "они", "если", "жизни", "жить", "сильно" } },
        { 'н', new List<string> { "он", "но", "она", "они", "один", "нужно", "ничего" } }
    };

        var fallbackUkrainianWords = new Dictionary<char, List<string>>
    {
        { 'о', new List<string> { "що", "його", "того", "слово", "добре", "особа" } },
        { 'а', new List<string> { "так", "як", "вона", "сказав", "справа", "гарно" } },
        { 'е', new List<string> { "все", "уже", "тебе", "себе", "серце", "небо" } },
        { 'и', new List<string> { "ти", "вони", "якщо", "життя", "жити", "сильно" } },
        { 'і', new List<string> { "і", "ці", "інші", "місто", "світ", "дійсно" } }
    };

        if (languagePracticeWords["english"].Count == 0)
        {
            languagePracticeWords["english"] = new Dictionary<char, List<string>>(fallbackEnglishWords);
        }

        if (languagePracticeWords["russian"].Count == 0)
        {
            languagePracticeWords["russian"] = new Dictionary<char, List<string>>(fallbackRussianWords);
        }

        if (languagePracticeWords["ukrainian"].Count == 0)
        {
            languagePracticeWords["ukrainian"] = new Dictionary<char, List<string>>(fallbackUkrainianWords);
        }
    }

    private async Task LoadDictionary(string language, string filePath)
    {
        try
        {
            Console.WriteLine($"Loading dictionary for {language} from {filePath}");

            string jsonContent = await LoadDictionaryWithHttpClient(filePath);

            if (string.IsNullOrEmpty(jsonContent))
            {
                jsonContent = await LoadDictionaryWithJSFetch(filePath);
            }

            if (string.IsNullOrEmpty(jsonContent))
            {
                Console.WriteLine($"Failed to load dictionary for {language}");
                return;
            }

            Console.WriteLine($"Dictionary content (first 100 chars): {jsonContent.Substring(0, Math.Min(100, jsonContent.Length))}");

            var dictionaryData = JsonSerializer.Deserialize<Dictionary<string, List<string>>>(jsonContent);

            if (dictionaryData == null || dictionaryData.Count == 0)
            {
                Console.WriteLine($"Dictionary for {language} is empty or invalid");
                return;
            }

            foreach (var entry in dictionaryData)
            {
                foreach (var word in entry.Value)
                {
                    if (string.IsNullOrEmpty(word) || word.Length == 0)
                        continue;

                    char firstChar = word[0];

                    if (!languagePracticeWords[language].ContainsKey(firstChar))
                    {
                        languagePracticeWords[language][firstChar] = new List<string>();
                    }

                    if (!languagePracticeWords[language][firstChar].Contains(word))
                    {
                        languagePracticeWords[language][firstChar].Add(word);
                    }
                }
            }

            Console.WriteLine($"Successfully loaded dictionary for {language} with {languagePracticeWords[language].Count} keys");

            string keys = string.Join(", ", languagePracticeWords[language].Keys.Take(10));
            Console.WriteLine($"First keys: {keys}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dictionary for {language}: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task<string> LoadDictionaryWithHttpClient(string filePath)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.Timeout = TimeSpan.FromSeconds(3);

            var baseUrl = await JSRuntime.InvokeAsync<string>("eval", "window.location.origin");
            var fullUrl = $"{baseUrl}{filePath}";

            Console.WriteLine($"Loading from URL: {fullUrl}");

            var response = await httpClient.GetAsync(fullUrl);
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadAsStringAsync();
            }
            else
            {
                Console.WriteLine($"HTTP error: {response.StatusCode}");
                return null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HttpClient error: {ex.Message}");
            return null;
        }
    }

    private async Task<string> LoadDictionaryWithJSFetch(string filePath)
    {
        try
        {
            string jsCode = @"
        async function fetchFile(url) {
            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`HTTP error: ${response.status}`);
                }
                const text = await response.text();
                return text;
            } catch (error) {
                console.error('Fetch error:', error);
                return null;
            }
        }
        fetchFile('" + filePath + @"')";

            var result = await JSRuntime.InvokeAsync<string>("eval", jsCode);
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JS Fetch error: {ex.Message}");
            return null;
        }
    }

    private async Task LoadDictionaryWithHttpClient(string language, string path)
    {
        try
        {
            Console.WriteLine($"Trying to load {language} dictionary via HttpClient from {path}");

            using (var httpClient = new System.Net.Http.HttpClient())
            {
                httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);
                httpClient.Timeout = TimeSpan.FromSeconds(10);

                var response = await httpClient.GetAsync(path);
                Console.WriteLine($"HttpClient response for {language}: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    var jsonContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Received {language} JSON content via HttpClient, length: {jsonContent.Length}");

                    if (!string.IsNullOrEmpty(jsonContent) && jsonContent.StartsWith("{") && jsonContent.EndsWith("}"))
                    {
                        var options = new System.Text.Json.JsonSerializerOptions
                        {
                            AllowTrailingCommas = true,
                            ReadCommentHandling = System.Text.Json.JsonCommentHandling.Skip
                        };

                        var dictionary = System.Text.Json.JsonSerializer.Deserialize<Dictionary<char, List<string>>>(jsonContent, options);
                        if (dictionary != null && dictionary.Count > 0)
                        {
                            languagePracticeWords[language] = dictionary;

                            await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"dictionary_{language}", jsonContent);

                            Console.WriteLine($"{language} dictionary loaded from server via HttpClient and cached, keys: {dictionary.Keys.Count}");
                        }
                        else
                        {
                            Console.WriteLine($"Failed to deserialize {language} dictionary via HttpClient or dictionary is empty");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Invalid JSON format for {language} dictionary via HttpClient");
                    }
                }
                else
                {
                    Console.WriteLine($"Failed to load {language} dictionary via HttpClient, status code: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HttpClient error for {language} dictionary: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
            }
        }
    }

    private async Task<string> DetectAndConvertEncoding(string content)
    {
        try
        {
            if (content.StartsWith("\uFEFF"))
            {
                content = content.Substring(1);
            }

            bool hasInvalidChars = content.Contains("�");

            if (hasInvalidChars)
            {
                Console.WriteLine("Detected invalid characters, trying different encodings");

                byte[] bytes = Encoding.UTF8.GetBytes(content);

                string windows1251 = Encoding.GetEncoding(1251).GetString(bytes);
                if (!windows1251.Contains("�"))
                {
                    Console.WriteLine("Windows-1251 encoding detected");
                    return windows1251;
                }

                string iso88595 = Encoding.GetEncoding(28595).GetString(bytes);
                if (!iso88595.Contains("�"))
                {
                    Console.WriteLine("ISO-8859-5 encoding detected");
                    return iso88595;
                }

                string koi8r = Encoding.GetEncoding(20866).GetString(bytes);
                if (!koi8r.Contains("�"))
                {
                    Console.WriteLine("KOI8-R encoding detected");
                    return koi8r;
                }
            }

            return content;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Encoding detection error: {ex.Message}");
            return content;
        }
    }

    private async Task LoadSettingsFromLocalStorage()
    {
        try
        {
            var savedKeyboardLayout = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "keyboardLayout");
            var savedLanguage = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "language");

            if (!string.IsNullOrEmpty(savedKeyboardLayout))
            {
                keyboardLayout = savedKeyboardLayout;
                tempKeyboardLayout = savedKeyboardLayout;
            }

            if (!string.IsNullOrEmpty(savedLanguage))
            {
                language = savedLanguage;
                tempLanguage = savedLanguage;

                keyHeatMap.Clear();
                foreach (var key in GetCurrentLanguageKeys())
                {
                    keyHeatMap[key] = 0;
                }

                currentKey = GetCurrentLanguageKeys()[0];
                highlightedKey = currentKey;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading settings from localStorage: {ex.Message}");
        }
    }


    private char[] GetCurrentLanguageKeys()
    {
        return languageKeys.ContainsKey(language) ? languageKeys[language] : languageKeys["english"];
    }

    private void GeneratePracticeWords()
    {
        try
        {
            if (!languagePracticeWords.ContainsKey(language))
            {
                languagePracticeWords[language] = new Dictionary<char, List<string>>();
            }

            if (languagePracticeWords[language].ContainsKey(currentKey) &&
                languagePracticeWords[language][currentKey].Count > 0)
            {
                var wordsList = new List<string>(languagePracticeWords[language][currentKey]);

                int wordsCount = Math.Min(random.Next(5, 11), wordsList.Count);
                practiceWords = new List<string>();

                wordsList = ShuffleList(wordsList);

                for (int i = 0; i < wordsCount; i++)
                {
                    practiceWords.Add(wordsList[i % wordsList.Count]);
                }

                practiceWords = ShuffleList(practiceWords);
            }
            else
            {
                var keys = GetCurrentLanguageKeys();
                int currentIndex = Array.IndexOf(keys, currentKey);

                for (int i = 1; i < keys.Length; i++)
                {
                    int nextIndex = (currentIndex + i) % keys.Length;
                    char nextKey = keys[nextIndex];

                    if (languagePracticeWords[language].ContainsKey(nextKey) &&
                        languagePracticeWords[language][nextKey].Count > 0)
                    {
                        currentKey = nextKey;
                        highlightedKey = currentKey;

                        GeneratePracticeWords();
                        return;
                    }
                }

                practiceWords = new List<string> { "no", "words", "found", "for", "this", "key" };
            }

            UpdateKeyStatus();

            practiceText = string.Join(" ", practiceWords);
            typedText = "";
            currentPosition = 0;
            isCompleted = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GeneratePracticeWords: {ex.Message}");
        }
    }

    private List<T> ShuffleList<T>(List<T> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = random.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
        return list;
    }

    private void UpdateKeyStatus()
    {
        if (language == "english")
        {
            switch (currentKey)
            {
                case 'e':
                    currentKeyStatus = "Most common letter in English.";
                    break;
                case 'n':
                    currentKeyStatus = "Common consonant, focus on rhythm.";
                    break;
                case 'i':
                    currentKeyStatus = "Common vowel, keep fingers light.";
                    break;
                case 'a':
                    currentKeyStatus = "Basic vowel, practice accuracy.";
                    break;
                case 'r':
                    currentKeyStatus = "Common consonant, maintain posture.";
                    break;
                case 'l':
                    currentKeyStatus = "Practice with right pinky finger.";
                    break;
                case 't':
                    currentKeyStatus = "Index finger practice, stay relaxed.";
                    break;
                case 'o':
                    currentKeyStatus = "Round vowel, maintain rhythm.";
                    break;
                case 's':
                    currentKeyStatus = "Common initial consonant.";
                    break;
                case 'u':
                    currentKeyStatus = "Vowel for right hand practice.";
                    break;
                default:
                    currentKeyStatus = "Practice this key carefully.";
                    break;
            }
        }
        else if (language == "russian")
        {
            switch (currentKey)
            {
                case 'о':
                    currentKeyStatus = "Самая частая буква в русском языке.";
                    break;
                case 'а':
                    currentKeyStatus = "Основная гласная, тренируйте точность.";
                    break;
                case 'е':
                    currentKeyStatus = "Частая гласная, сохраняйте ритм.";
                    break;
                case 'и':
                    currentKeyStatus = "Распространенная гласная, легкие пальцы.";
                    break;
                case 'н':
                    currentKeyStatus = "Частая согласная, сохраняйте осанку.";
                    break;
                case 'т':
                    currentKeyStatus = "Тренировка указательного пальца.";
                    break;
                case 'р':
                    currentKeyStatus = "Тренировка указательного пальца.";
                    break;
                default:
                    currentKeyStatus = "Тренируйте эту клавишу внимательно.";
                    break;
            }
        }
        else if (language == "ukrainian")
        {
            switch (currentKey)
            {
                case 'о':
                    currentKeyStatus = "Найчастіша літера в українській мові.";
                    break;
                case 'а':
                    currentKeyStatus = "Основна голосна, тренуйте точність.";
                    break;
                case 'е':
                    currentKeyStatus = "Часта голосна, зберігайте ритм.";
                    break;
                case 'и':
                    currentKeyStatus = "Поширена голосна, легкі пальці.";
                    break;
                case 'і':
                    currentKeyStatus = "Унікальна українська літера.";
                    break;
                case 'н':
                    currentKeyStatus = "Часта приголосна, зберігайте поставу.";
                    break;
                case 'т':
                    currentKeyStatus = "Тренування вказівного пальця.";
                    break;
                default:
                    currentKeyStatus = "Тренуйте цю клавішу уважно.";
                    break;
            }
        }
        else
        {
            currentKeyStatus = "Practice this key carefully.";
        }
    }

    private string GetKeyClass(char key)
    {
        List<string> classes = new List<string>();

        if (pressedKeys.Contains(key.ToString()))
        {
            classes.Add("pressed");
        }

        if (keyHeatMap.ContainsKey(key))
        {
            int heat = keyHeatMap[key];
            if (heat > 20) classes.Add("heat-high");
            else if (heat > 10) classes.Add("heat-medium");
            else if (heat > 0) classes.Add("heat-low");
        }

        if (key == highlightedKey)
        {
            classes.Add("highlighted");
        }

        if (keyStatistics.ContainsKey(key) && keyStatistics[key].IsCompleted)
        {
            classes.Add("completed");
        }

        return string.Join(" ", classes);
    }

    private async Task ToggleFullscreen()
    {
        try
        {
            bool functionExists = await JSRuntime.InvokeAsync<bool>("eval", @"
            typeof window.keyboardInterop !== 'undefined' &&
            typeof window.keyboardInterop.toggleFullscreen === 'function'
        ");

            if (functionExists)
            {
                await JSRuntime.InvokeVoidAsync("keyboardInterop.toggleFullscreen");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                if (!document.fullscreenElement) {
                    document.documentElement.requestFullscreen().catch((err) => {
                        console.error(`Error attempting to enable fullscreen: ${err.message}`);
                    });
                } else {
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    }
                }
            ");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling fullscreen: {ex.Message}");
        }
    }

    private void OpenSettings()
    {
        tempKeyboardLayout = keyboardLayout;
        tempLanguage = language;

        showSettings = true;
    }

    private void CloseSettings()
    {
        keyboardLayout = tempKeyboardLayout;
        language = tempLanguage;

        showSettings = false;
    }

    private async Task SaveSettings()
    {
        if (tempLanguage != language)
        {
            keyHeatMap.Clear();

            foreach (var key in GetCurrentLanguageKeys())
            {
                keyHeatMap[key] = 0;
            }

            currentKey = GetCurrentLanguageKeys()[0];
            highlightedKey = currentKey;
        }

        await SaveSettingsToLocalStorage();

        RestartPractice();

        showSettings = false;
    }

    private async Task SaveSettingsToLocalStorage()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "keyboardLayout", keyboardLayout);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "language", language);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving settings to localStorage: {ex.Message}");
        }
    }

    private void ShowHelp()
    {
        showHelp = true;
    }

    private void CloseHelp()
    {
        showHelp = false;
    }

    private async Task FocusTypingArea()
    {
        try
        {
            bool functionExists = await JSRuntime.InvokeAsync<bool>("eval", @"
            typeof window.keyboardInterop !== 'undefined' &&
            typeof window.keyboardInterop.focusTypingArea === 'function'
        ");

            if (functionExists)
            {
                await JSRuntime.InvokeVoidAsync("keyboardInterop.focusTypingArea", "typing-area");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                const element = document.getElementById('typing-area');
                if (element) {
                    element.focus();
                }
            ");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error focusing typing area: {ex.Message}");
        }
    }

    private void HandleBlur()
    {
        isFocused = false;
        StateHasChanged();
    }

    private void HandleFocus()
    {
        isFocused = true;

        if (!isPracticeActive && !isCompleted)
        {
            StartPractice();
        }

        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (isCompleted) return;

        pressedKeys.Add(e.Key);

        if (e.Key == "Escape")
        {
            RestartPractice();
            return;
        }

        if (e.CtrlKey && e.Key == "Enter")
        {
            NextPractice();
            return;
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (isCompleted) return;

        if (!isPracticeActive)
        {
            StartPractice();
        }

        if (e.Key.Length == 1)
        {
            char key = e.Key[0];

            typedText += key;

            totalKeysPressed++;

            if (currentPosition < practiceText.Length && key == practiceText[currentPosition])
            {
                correctKeysPressed++;

                if (keyHeatMap.ContainsKey(key))
                {
                    keyHeatMap[key]++;
                }
            }

            currentPosition++;

            if (currentPosition >= practiceText.Length)
            {
                CompletePractice();
            }

            UpdateMetrics();

            StateHasChanged();
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        pressedKeys.Remove(e.Key);
        StateHasChanged();
    }

    private void NextPractice()
    {
        var keys = GetCurrentLanguageKeys();
        int currentIndex = Array.IndexOf(keys, currentKey);
        int nextIndex = (currentIndex + 1) % keys.Length;
        currentKey = keys[nextIndex];
        highlightedKey = currentKey;

        GeneratePracticeWords();

        ResetPracticeState();

        StateHasChanged();
    }

    private void OnPracticeTimerElapsed(object sender, ElapsedEventArgs e)
    {
        practiceTime++;
        UpdateMetrics();

        InvokeAsync(StateHasChanged);
    }

    private void PreviousPractice()
    {
        var keys = GetCurrentLanguageKeys();
        int currentIndex = Array.IndexOf(keys, currentKey);
        int prevIndex = (currentIndex - 1 + keys.Length) % keys.Length;
        currentKey = keys[prevIndex];
        highlightedKey = currentKey;

        GeneratePracticeWords();

        ResetPracticeState();

        StateHasChanged();
    }

    private void RestartPractice()
    {
        GeneratePracticeWords();

        ResetPracticeState();

        StateHasChanged();
    }

    private void StartPractice()
    {
        isPracticeActive = true;
        startTime = DateTime.Now;
        practiceTime = 0;

        practiceTimer.Start();
    }

    private void CompletePractice()
    {
        isCompleted = true;
        isPracticeActive = false;

        practiceTimer.Stop();

        UpdateMetrics();

        if (!keyStatistics.ContainsKey(currentKey))
        {
            keyStatistics[currentKey] = new KeyStatistics();
        }

        keyStatistics[currentKey].Accuracy = accuracy;
        keyStatistics[currentKey].Wpm = wpm;
        keyStatistics[currentKey].Score = score;
        keyStatistics[currentKey].IsCompleted = true;

        completedKeysCount = keyStatistics.Count(k => k.Value.IsCompleted);

        CheckAllKeysCompleted();

        if (isAllKeysCompleted)
        {
            CalculateOverallStatistics();
            showStatistics = true;
        }
        else
        {
            NextPractice();
        }
    }

    private void OnFeedbackTimerElapsed(object sender, ElapsedEventArgs e)
    {
        nextKeyCountdown--;

        if (nextKeyCountdown <= 0)
        {
            feedbackTimer.Stop();

            InvokeAsync(() =>
            {
                showAccuracyFeedback = false;

                if (isAllKeysCompleted)
                {
                    CalculateOverallStatistics();
                    showStatistics = true;
                }
                else
                {
                    NextPractice();
                }

                StateHasChanged();
            });
        }

        InvokeAsync(StateHasChanged);
    }

    private void ShowFinalStatistics()
    {
        CalculateOverallStatistics();
        showStatistics = true;
        StateHasChanged();
    }

    private void GenerateAccuracyFeedbackMessage()
    {
        if (language == "english")
        {
            if (accuracy >= 98)
            {
                accuracyFeedbackMessage = "Excellent! Your accuracy with this key is outstanding.";
            }
            else if (accuracy >= 90)
            {
                accuracyFeedbackMessage = "Good job! You have solid accuracy with this key.";
            }
            else if (accuracy >= 80)
            {
                accuracyFeedbackMessage = "Not bad, but try to focus more on accuracy than speed.";
            }
            else
            {
                accuracyFeedbackMessage = "You need more practice with this key. Focus on accuracy first.";
            }
        }
        else if (language == "russian")
        {
            if (accuracy >= 98)
            {
                accuracyFeedbackMessage = "Отлично! У вас превосходная точность с этой клавишей.";
            }
            else if (accuracy >= 90)
            {
                accuracyFeedbackMessage = "Хорошая работа! У вас хорошая точность с этой клавишей.";
            }
            else if (accuracy >= 80)
            {
                accuracyFeedbackMessage = "Неплохо, но старайтесь больше сосредоточиться на точности, чем на скорости.";
            }
            else
            {
                accuracyFeedbackMessage = "Вам нужно больше практики с этой клавишей. Сначала сосредоточьтесь на точности.";
            }
        }
        else if (language == "ukrainian")
        {
            if (accuracy >= 98)
            {
                accuracyFeedbackMessage = "Відмінно! У вас чудова точність з цією клавішею.";
            }
            else if (accuracy >= 90)
            {
                accuracyFeedbackMessage = "Гарна робота! У вас хороша точність з цією клавішею.";
            }
            else if (accuracy >= 80)
            {
                accuracyFeedbackMessage = "Непогано, але намагайтеся більше зосередитися на точності, ніж на швидкості.";
            }
            else
            {
                accuracyFeedbackMessage = "Вам потрібно більше практики з цією клавішею. Спочатку зосередьтеся на точності.";
            }
        }
    }

    private void CheckAllKeysCompleted()
    {
        var keys = GetCurrentLanguageKeys();
        isAllKeysCompleted = keys.All(k => keyStatistics.ContainsKey(k) && keyStatistics[k].IsCompleted);
    }

    private void CalculateOverallStatistics()
    {
        if (keyStatistics.Count == 0) return;

        double totalAccuracy = 0;
        double totalWpm = 0;
        totalScore = 0;
        keysToImprove.Clear();

        foreach (var stat in keyStatistics)
        {
            totalAccuracy += stat.Value.Accuracy;
            totalWpm += stat.Value.Wpm;
            totalScore += stat.Value.Score;

            if (stat.Value.Accuracy < 85)
            {
                keysToImprove.Add(stat.Key);
            }
        }

        averageAccuracy = totalAccuracy / keyStatistics.Count;
        averageWpm = totalWpm / keyStatistics.Count;

        if (keysToImprove.Count == 0)
        {
            var slowestKeys = keyStatistics
                .OrderBy(k => k.Value.Wpm)
                .Take(3)
                .Select(k => k.Key);

            keysToImprove.AddRange(slowestKeys);
        }
    }

    private void CloseStatistics()
    {
        showStatistics = false;
        StateHasChanged();
    }

    private void CloseFeedback()
    {
        showAccuracyFeedback = false;
        feedbackTimer?.Stop();

        if (isAllKeysCompleted)
        {
            CalculateOverallStatistics();
            showStatistics = true;
        }
        else
        {
            NextPractice();
        }

        StateHasChanged();
    }

    private void RestartAllPractice()
    {
        keyStatistics.Clear();
        completedKeysCount = 0;
        isAllKeysCompleted = false;

        showStatistics = false;

        currentKey = GetCurrentLanguageKeys()[0];
        highlightedKey = currentKey;

        GeneratePracticeWords();

        ResetPracticeState();

        StateHasChanged();
    }

    private string GetLocalizedText(string key)
    {
        var translations = new Dictionary<string, Dictionary<string, string>>
    {
        { "english", new Dictionary<string, string>
            {
                { "Statistics", "Statistics" },
                { "Overall Results", "Overall Results" },
                { "Average Accuracy", "Average Accuracy" },
                { "Average Speed", "Average Speed" },
                { "Total Score", "Total Score" },
                { "Keys to Practice", "Keys to Practice" },
                { "Practice Recommendation", "Focus on practicing these keys to improve your typing skills." },
                { "Practice Again", "Practice Again" },
                { "Practice Complete", "Practice Complete" },
                { "Results for key", "Results for key" },
                { "Accuracy", "Accuracy" },
                { "Speed", "Speed" },
                { "Score", "Score" },
                { "Next key in", "Next key in" },
                { "seconds", "seconds" }
            }
        },
        { "russian", new Dictionary<string, string>
            {
                { "Statistics", "Статистика" },
                { "Overall Results", "Общие результаты" },
                { "Average Accuracy", "Средняя точность" },
                { "Average Speed", "Средняя скорость" },
                { "Total Score", "Общий счет" },
                { "Keys to Practice", "Клавиши для тренировки" },
                { "Practice Recommendation", "Сосредоточьтесь на тренировке этих клавиш, чтобы улучшить навыки печати." },
                { "Practice Again", "Тренироваться снова" },
                { "Practice Complete", "Тренировка завершена" },
                { "Results for key", "Результаты для клавиши" },
                { "Accuracy", "Точность" },
                { "Speed", "Скорость" },
                { "Score", "Счет" },
                { "Next key in", "Следующая клавиша через" },
                { "seconds", "секунд" }
            }
        },
        { "ukrainian", new Dictionary<string, string>
            {
                { "Statistics", "Статистика" },
                { "Overall Results", "Загальні результати" },
                { "Average Accuracy", "Середня точність" },
                { "Average Speed", "Середня швидкість" },
                { "Total Score", "Загальний рахунок" },
                { "Keys to Practice", "Клавіші для тренування" },
                { "Practice Recommendation", "Зосередьтеся на тренуванні цих клавіш, щоб покращити навички друку." },
                { "Practice Again", "Тренуватися знову" },
                { "Practice Complete", "Тренування завершено" },
                { "Results for key", "Результати для клавіші" },
                { "Accuracy", "Точність" },
                { "Speed", "Швидкість" },
                { "Score", "Рахунок" },
                { "Next key in", "Наступна клавіша через" },
                { "seconds", "секунд" }
            }
        }
    };

        if (translations.ContainsKey(language) && translations[language].ContainsKey(key))
        {
            return translations[language][key];
        }

        return key;
    }

    public void Dispose()
    {
        practiceTimer?.Dispose();
        feedbackTimer?.Dispose();
    }

    private void ResetPracticeState()
    {
        isPracticeActive = false;
        isCompleted = false;
        practiceTime = 0;
        totalKeysPressed = 0;
        correctKeysPressed = 0;
        wpm = 0;
        rawWpm = 0;
        accuracy = 0;
        score = 0;

        practiceTimer.Stop();
    }

    private void UpdateMetrics()
    {
        if (practiceTime > 0)
        {
            double minutes = practiceTime / 60.0;
            rawWpm = totalKeysPressed / 5.0 / minutes;
            wpm = correctKeysPressed / 5.0 / minutes;
        }

        if (totalKeysPressed > 0)
        {
            accuracy = (int)Math.Round((double)correctKeysPressed / totalKeysPressed * 100);
        }

        score = (int)(wpm * (accuracy / 100.0) * 10);

        if (accuracy >= 98)
        {
            accuracyStatus = "Excellent! Keep up the good work.";
        }
        else if (accuracy >= 95)
        {
            accuracyStatus = "Very good accuracy. Focus on consistency.";
        }
        else if (accuracy >= 90)
        {
            accuracyStatus = "Good accuracy. Try to be more precise.";
        }
        else if (accuracy >= 80)
        {
            accuracyStatus = "Decent accuracy. Slow down to improve.";
        }
        else
        {
            accuracyStatus = "Focus on accuracy rather than speed.";
        }
    }
}
