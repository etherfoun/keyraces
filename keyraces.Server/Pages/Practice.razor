@page "/practice"
@using System.Timers
@using keyraces.Core.Entities
@using keyraces.Core.Interfaces
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject ITextSnippetService TextSnippetService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="practice-container">
    <div class="metrics-bar">
        <div class="metrics-group">
            <span class="metrics-label">Metrics:</span>
            <span class="metrics-item">Speed: <span class="metrics-value">@wpm.ToString("0.0")</span> wpm (<span class="metrics-value">@rawWpm.ToString("0.0")</span> wpm)</span>
            <span class="metrics-item">Accuracy: <span class="metrics-value">@accuracy.ToString("0")</span>%</span>
            <span class="metrics-item">Score: <span class="metrics-value">@score</span></span>
        </div>
        <div class="controls-group">
            <button class="icon-button" title="Help" @onclick="ShowHelp">
                <span class="icon">?</span>
            </button>
            <button class="icon-button" title="Restart" @onclick="RestartPractice">
                <span class="icon">↺</span>
            </button>
            <button class="icon-button" title="Previous" @onclick="PreviousPractice">
                <span class="icon">←</span>
            </button>
            <button class="icon-button" title="Next" @onclick="NextPractice">
                <span class="icon">→</span>
            </button>
            <button class="icon-button" title="Fullscreen" @onclick="ToggleFullscreen">
                <span class="icon">⛶</span>
            </button>
            <button class="settings-button" @onclick="OpenSettings">
                <span class="icon">⚙</span> SETTINGS
            </button>
        </div>
    </div>

    <div class="practice-info">
        <div class="info-row">
            <span class="info-label">All keys:</span>
            <div class="keys-list">
                @foreach (var key in allKeys)
                {
                    <span class="key-badge @(key == currentKey ? "current" : "")">@key</span>
                }
            </div>
        </div>
        <div class="info-row">
            <span class="info-label">Current key:</span>
            <span class="key-badge current">@currentKey</span>
            <span class="info-text">@currentKeyStatus</span>
        </div>
        <div class="info-row">
            <span class="info-label">Accuracy:</span>
            <span class="info-text">@accuracyStatus</span>
        </div>
    </div>

    <div class="typing-area" tabindex="0" @ref="typingAreaRef" @onkeydown="HandleKeyDown" @onkeypress="HandleKeyPress" @onkeyup="HandleKeyUp" @onfocus="HandleFocus" @onblur="HandleBlur">
        <div class="text-display">
            <div class="target-text">
                @for (int i = 0; i < practiceText.Length; i++)
                {
                    char c = practiceText[i];
                    string charClass = "";

                    if (i < typedText.Length)
                    {
                        charClass = typedText[i] == c ? "correct" : "incorrect";
                    }
                    else if (i == typedText.Length)
                    {
                        charClass = "current";
                    }

                    if (c == ' ')
                    {
                        <span class="@charClass space-dot">·</span>
                    }
                    else
                    {
                        <span class="@charClass">@c</span>
                    }
                }
            </div>
            <div class="typed-text">
                @typedText
            </div>
        </div>
        <div class="typing-prompt @(isFocused ? "focused" : "")">
            Click here and start typing...
        </div>
    </div>

    <div class="keyboard-container">
        <div class="keyboard">
            <div class="keyboard-row">
                <div class="key @GetKeyClass('`')" data-key="`"><span class="key-char">`</span></div>
                <div class="key @GetKeyClass('1')" data-key="1"><span class="key-char">1</span></div>
                <div class="key @GetKeyClass('2')" data-key="2"><span class="key-char">2</span></div>
                <div class="key @GetKeyClass('3')" data-key="3"><span class="key-char">3</span></div>
                <div class="key @GetKeyClass('4')" data-key="4"><span class="key-char">4</span></div>
                <div class="key @GetKeyClass('5')" data-key="5"><span class="key-char">5</span></div>
                <div class="key @GetKeyClass('6')" data-key="6"><span class="key-char">6</span></div>
                <div class="key @GetKeyClass('7')" data-key="7"><span class="key-char">7</span></div>
                <div class="key @GetKeyClass('8')" data-key="8"><span class="key-char">8</span></div>
                <div class="key @GetKeyClass('9')" data-key="9"><span class="key-char">9</span></div>
                <div class="key @GetKeyClass('0')" data-key="0"><span class="key-char">0</span></div>
                <div class="key @GetKeyClass('-')" data-key="-"><span class="key-char">-</span></div>
                <div class="key @GetKeyClass('=')" data-key="="><span class="key-char">=</span></div>
                <div class="key backspace" data-key="Backspace"><span class="key-char">Backspace</span></div>
            </div>
            <div class="keyboard-row">
                <div class="key tab" data-key="Tab"><span class="key-char">Tab</span></div>
                <div class="key @GetKeyClass('q')" data-key="q"><span class="key-char">Q</span></div>
                <div class="key @GetKeyClass('w')" data-key="w"><span class="key-char">W</span></div>
                <div class="key @GetKeyClass('e')" data-key="e"><span class="key-char">E</span></div>
                <div class="key @GetKeyClass('r')" data-key="r"><span class="key-char">R</span></div>
                <div class="key @GetKeyClass('t')" data-key="t"><span class="key-char">T</span></div>
                <div class="key @GetKeyClass('y')" data-key="y"><span class="key-char">Y</span></div>
                <div class="key @GetKeyClass('u')" data-key="u"><span class="key-char">U</span></div>
                <div class="key @GetKeyClass('i')" data-key="i"><span class="key-char">I</span></div>
                <div class="key @GetKeyClass('o')" data-key="o"><span class="key-char">O</span></div>
                <div class="key @GetKeyClass('p')" data-key="p"><span class="key-char">P</span></div>
                <div class="key @GetKeyClass('[')" data-key="["><span class="key-char">[</span></div>
                <div class="key @GetKeyClass(']')" data-key="]"><span class="key-char">]</span></div>
                <div class="key backslash" data-key="\"><span class="key-char">\</span></div>
            </div>
            <div class="keyboard-row">
                <div class="key caps" data-key="CapsLock"><span class="key-char">Caps</span></div>
                <div class="key @GetKeyClass('a')" data-key="a"><span class="key-char">A</span></div>
                <div class="key @GetKeyClass('s')" data-key="s"><span class="key-char">S</span></div>
                <div class="key @GetKeyClass('d')" data-key="d"><span class="key-char">D</span></div>
                <div class="key @GetKeyClass('f')" data-key="f"><span class="key-char">F</span></div>
                <div class="key @GetKeyClass('g')" data-key="g"><span class="key-char">G</span></div>
                <div class="key @GetKeyClass('h')" data-key="h"><span class="key-char">H</span></div>
                <div class="key @GetKeyClass('j')" data-key="j"><span class="key-char">J</span></div>
                <div class="key @GetKeyClass('k')" data-key="k"><span class="key-char">K</span></div>
                <div class="key @GetKeyClass('l')" data-key="l"><span class="key-char">L</span></div>
                <div class="key @GetKeyClass(';')" data-key=";"><span class="key-char">;</span></div>
                <div class="key @GetKeyClass('\'')" data-key="'"><span class="key-char">'</span></div>
                <div class="key enter" data-key="Enter"><span class="key-char">Enter</span></div>
            </div>
            <div class="keyboard-row">
                <div class="key shift left-shift" data-key="ShiftLeft"><span class="key-char">Shift</span></div>
                <div class="key @GetKeyClass('z')" data-key="z"><span class="key-char">Z</span></div>
                <div class="key @GetKeyClass('x')" data-key="x"><span class="key-char">X</span></div>
                <div class="key @GetKeyClass('c')" data-key="c"><span class="key-char">C</span></div>
                <div class="key @GetKeyClass('v')" data-key="v"><span class="key-char">V</span></div>
                <div class="key @GetKeyClass('b')" data-key="b"><span class="key-char">B</span></div>
                <div class="key @GetKeyClass('n')" data-key="n"><span class="key-char">N</span></div>
                <div class="key @GetKeyClass('m')" data-key="m"><span class="key-char">M</span></div>
                <div class="key @GetKeyClass(',')" data-key=","><span class="key-char">,</span></div>
                <div class="key @GetKeyClass('.')" data-key="."><span class="key-char">.</span></div>
                <div class="key @GetKeyClass('/')" data-key="/"><span class="key-char">/</span></div>
                <div class="key shift right-shift" data-key="ShiftRight"><span class="key-char">Shift</span></div>
            </div>
            <div class="keyboard-row">
                <div class="key ctrl left-ctrl" data-key="ControlLeft"><span class="key-char">Ctrl</span></div>
                <div class="key win" data-key="MetaLeft"><span class="key-char">Win</span></div>
                <div class="key alt" data-key="AltLeft"><span class="key-char">Alt</span></div>
                <div class="key space @GetKeyClass(' ')" data-key=" "><span class="key-char"></span></div>
                <div class="key alt" data-key="AltRight"><span class="key-char">Alt</span></div>
                <div class="key win" data-key="MetaRight"><span class="key-char">Win</span></div>
                <div class="key menu" data-key="ContextMenu"><span class="key-char">Menu</span></div>
                <div class="key ctrl right-ctrl" data-key="ControlRight"><span class="key-char">Ctrl</span></div>
            </div>
        </div>
    </div>

    @if (showSettings)
    {
        <div class="settings-modal">
            <div class="settings-content">
                <div class="settings-header">
                    <h2>Settings</h2>
                    <button class="close-button" @onclick="CloseSettings">×</button>
                </div>
                <div class="settings-body">
                    <div class="settings-section">
                        <h3>Keyboard Layout</h3>
                        <div class="settings-option">
                            <select @bind="keyboardLayout">
                                <option value="qwerty">QWERTY</option>
                                <option value="dvorak">Dvorak</option>
                                <option value="colemak">Colemak</option>
                            </select>
                        </div>
                    </div>
                    <div class="settings-section">
                        <h3>Practice Mode</h3>
                        <div class="settings-option">
                            <select @bind="practiceMode">
                                <option value="letters">Letters</option>
                                <option value="words">Words</option>
                                <option value="sentences">Sentences</option>
                            </select>
                        </div>
                    </div>
                    <div class="settings-section">
                        <h3>Difficulty</h3>
                        <div class="settings-option">
                            <select @bind="difficulty">
                                <option value="easy">Easy</option>
                                <option value="medium">Medium</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="settings-footer">
                    <button class="settings-button save" @onclick="SaveSettings">Save</button>
                    <button class="settings-button cancel" @onclick="CloseSettings">Cancel</button>
                </div>
            </div>
        </div>
    }

    @if (showHelp)
    {
        <div class="help-modal">
            <div class="help-content">
                <div class="help-header">
                    <h2>Help</h2>
                    <button class="close-button" @onclick="CloseHelp">×</button>
                </div>
                <div class="help-body">
                    <h3>How to Practice</h3>
                    <p>Click on the typing area and start typing the words shown. The current key to focus on will be highlighted.</p>

                    <h3>Keyboard Shortcuts</h3>
                    <ul>
                        <li><strong>Esc</strong> - Reset current practice</li>
                        <li><strong>Ctrl+Enter</strong> - Start new practice</li>
                        <li><strong>F11</strong> - Toggle fullscreen</li>
                    </ul>

                    <h3>Metrics</h3>
                    <p><strong>WPM</strong> - Words Per Minute, measures your typing speed</p>
                    <p><strong>Accuracy</strong> - Percentage of correctly typed characters</p>
                    <p><strong>Score</strong> - Points earned based on speed and accuracy</p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private ElementReference typingAreaRef;
    private Timer practiceTimer;
    private DateTime startTime;
    private bool isPracticeActive = false;
    private bool isFocused = false;
    private bool showSettings = false;
    private bool showHelp = false;
    private string keyboardLayout = "qwerty";
    private string practiceMode = "letters";
    private string difficulty = "medium";

    private double wpm = 0;
    private double rawWpm = 0;
    private int accuracy = 0;
    private int score = 0;
    private int practiceTime = 0;

    private int totalKeysPressed = 0;
    private int correctKeysPressed = 0;

    private char currentKey = 'e';
    private string currentKeyStatus = "Not calibrated, need more samples.";
    private string accuracyStatus = "No accuracy streaks.";
    private List<string> practiceWords = new List<string>();

    private string practiceText = "";
    private string typedText = "";
    private int currentPosition = 0;
    private bool isCompleted = false;

    private Random random = new Random();

    private char[] allKeys = new char[] { 'e', 'n', 'i', 'a', 'r', 'l', 't', 'o', 's', 'u', 'd', 'y', 'c', 'g', 'h', 'p', 'k', 'b', 'm', 'f', 'z', 'v', 'x', 'q', 'j' };

    private Dictionary<char, List<string>> keyPracticeWords = new Dictionary<char, List<string>>();

    private HashSet<string> pressedKeys = new HashSet<string>();
    private Dictionary<char, int> keyHeatMap = new Dictionary<char, int>();
    private char? highlightedKey = null;

    protected override void OnInitialized()
    {
        practiceTimer = new Timer(1000);
        practiceTimer.Elapsed += OnPracticeTimerElapsed;

        foreach (var key in allKeys)
        {
            keyHeatMap[key] = 0;
        }

        highlightedKey = currentKey;

        InitializeKeyPracticeWords();

        GeneratePracticeWords();
    }

    private void InitializeKeyPracticeWords()
    {
        keyPracticeWords['e'] = new List<string> {
            "line", "area", "rear", "arena", "era", "ear", "era", "nearer", "inner", "real",
            "eerie", "era", "rear", "lean", "alien", "era", "alien", "lean", "inner", "lean",
            "eerie", "arena", "real", "linen"
        };

        keyPracticeWords['n'] = new List<string> {
            "nine", "next", "new", "never", "now", "name", "need", "nice", "night", "nature",
            "nation", "number", "north", "note", "notice", "nothing", "near", "nearly", "necessary", "neither"
        };

        keyPracticeWords['i'] = new List<string> {
            "in", "is", "it", "if", "into", "its", "idea", "item", "issue", "inside",
            "indeed", "instead", "include", "increase", "indicate", "individual", "industry", "information", "interest", "interview"
        };

        keyPracticeWords['a'] = new List<string> {
            "at", "an", "as", "all", "are", "and", "any", "about", "after", "again",
            "against", "air", "along", "also", "always", "among", "amount", "another", "answer", "appear"
        };

        keyPracticeWords['r'] = new List<string> {
            "run", "red", "rate", "role", "rule", "risk", "road", "room", "right", "rather",
            "reach", "read", "ready", "real", "really", "reason", "receive", "recent", "record", "remain"
        };

        keyPracticeWords['l'] = new List<string> {
            "like", "look", "long", "last", "late", "less", "life", "line", "list", "little",
            "live", "local", "large", "later", "laugh", "learn", "leave", "legal", "level", "light"
        };

        keyPracticeWords['t'] = new List<string> {
            "to", "the", "that", "this", "than", "they", "them", "then", "there", "these",
            "time", "take", "talk", "tell", "tend", "term", "test", "than", "thank", "their"
        };

        keyPracticeWords['o'] = new List<string> {
            "of", "on", "or", "one", "out", "our", "over", "only", "open", "other",
            "offer", "often", "order", "once", "own", "owner", "occur", "office", "option", "origin"
        };

        keyPracticeWords['s'] = new List<string> {
            "so", "see", "say", "she", "set", "six", "son", "sun", "sea", "sit",
            "such", "same", "send", "side", "sign", "site", "size", "some", "soon", "sort"
        };

        keyPracticeWords['u'] = new List<string> {
            "up", "us", "use", "unit", "upon", "user", "used", "under", "until", "usual",
            "unique", "unless", "update", "useful", "usually", "ultimate", "universe", "university", "understand", "unfortunately"
        };

        keyPracticeWords['d'] = new List<string> {
            "do", "day", "did", "due", "down", "deep", "door", "data", "dark", "dead",
            "deal", "dear", "debt", "deck", "deed", "deem", "deep", "deer", "deny", "desk"
        };

        keyPracticeWords['y'] = new List<string> {
            "you", "yes", "yet", "year", "your", "yard", "yarn", "yawn", "yeah", "yelp",
            "yield", "young", "youth", "yearly", "yellow", "yesterday", "yogurt", "yonder", "yourself", "youthful"
        };

        keyPracticeWords['c'] = new List<string> {
            "can", "car", "cat", "city", "come", "cost", "cold", "call", "case", "cash",
            "cell", "cent", "chair", "chart", "check", "child", "claim", "class", "clean", "clear"
        };

        keyPracticeWords['g'] = new List<string> {
            "go", "get", "good", "give", "game", "goal", "gold", "gone", "grow", "gain",
            "gate", "gear", "gift", "girl", "give", "glad", "glass", "glory", "glove", "grade"
        };

        keyPracticeWords['h'] = new List<string> {
            "he", "has", "had", "have", "here", "high", "home", "hand", "hard", "hate",
            "head", "hear", "heat", "help", "hero", "hide", "hill", "hint", "hire", "hold"
        };

        keyPracticeWords['p'] = new List<string> {
            "put", "pay", "per", "part", "past", "path", "pick", "plan", "play", "plus",
            "poem", "poet", "poll", "pool", "poor", "port", "pose", "post", "pull", "pure"
        };

        keyPracticeWords['k'] = new List<string> {
            "key", "kind", "know", "keep", "kick", "kill", "king", "kiss", "kite", "knee",
            "knife", "knock", "knot", "known", "kneel", "kettle", "kernel", "keyboard", "keyhole", "keynote"
        };

        keyPracticeWords['b'] = new List<string> {
            "be", "by", "but", "big", "boy", "buy", "bad", "bag", "ban", "bar",
            "base", "bath", "bear", "beat", "beer", "bell", "belt", "bend", "best", "bike"
        };

        keyPracticeWords['m'] = new List<string> {
            "me", "my", "man", "may", "map", "mad", "make", "many", "mark", "mask",
            "mass", "math", "meal", "mean", "meat", "meet", "menu", "mere", "mess", "milk"
        };

        keyPracticeWords['f'] = new List<string> {
            "for", "from", "find", "fact", "fair", "fall", "farm", "fast", "fate", "fear",
            "feed", "feel", "feet", "fell", "felt", "file", "fill", "film", "find", "fine"
        };

        keyPracticeWords['z'] = new List<string> {
            "zero", "zone", "zoom", "zeal", "zinc", "zest", "zing", "zany", "zeta", "zips",
            "zombie", "zodiac", "zenith", "zealot", "zigzag", "zephyr", "zipper", "zoology", "zillion", "zucchini"
        };

        keyPracticeWords['v'] = new List<string> {
            "very", "view", "vote", "value", "video", "visit", "vital", "voice", "valid", "vapor",
            "vault", "vegan", "venom", "venue", "verse", "verve", "vessel", "vexed", "viable", "vibrant"
        };

        keyPracticeWords['x'] = new List<string> {
            "box", "fix", "mix", "tax", "wax", "axe", "fox", "hex", "lax", "max",
            "six", "vex", "exit", "exam", "next", "taxi", "text", "xray", "apex", "excel"
        };

        keyPracticeWords['q'] = new List<string> {
            "quit", "quiz", "quick", "quiet", "quite", "quote", "quack", "quail", "quake", "qualm",
            "queen", "queer", "quell", "query", "quest", "queue", "quick", "quiet", "quill", "quilt"
        };

        keyPracticeWords['j'] = new List<string> {
            "job", "jam", "jar", "jaw", "jet", "jog", "join", "joke", "joy", "jump",
            "just", "junk", "jury", "jazz", "jeans", "jelly", "jewel", "joint", "judge", "juice"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                document.querySelector('.typing-area').id = 'typing-area';
                ");

                bool functionExists = await JSRuntime.InvokeAsync<bool>("eval", @"
                    typeof window.keyboardInterop !== 'undefined' &&
                    typeof window.keyboardInterop.disableScroll === 'function'
                ");

                if (functionExists)
                {
                    await JSRuntime.InvokeVoidAsync("keyboardInterop.disableScroll");
                }

                await FocusTypingArea();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JavaScript interop error: {ex.Message}");
            }
        }
    }

    private void OnPracticeTimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (isPracticeActive)
        {
            var elapsed = DateTime.Now - startTime;
            var totalSeconds = elapsed.TotalSeconds;

            if (totalSeconds > 0)
            {
                wpm = (keyHeatMap.Values.Sum() / 5.0) / (totalSeconds / 60.0);
                rawWpm = wpm;
            }

            practiceTime = Math.Min(30, (int)(elapsed.TotalMinutes));

            InvokeAsync(StateHasChanged);
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (!isPracticeActive)
        {
            StartPractice();
        }

        pressedKeys.Add(e.Key);

        if (e.Key == "Escape")
        {
            RestartPractice();
        }
        else if (e.Key == "Enter" && (e.CtrlKey || e.MetaKey))
        {
            NextPractice();
        }

        StateHasChanged();
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (isCompleted || !isPracticeActive)
            return;

        if (e.Key.Length == 1)
        {
            char key = e.Key.ToLower()[0];

            if (keyHeatMap.ContainsKey(key))
            {
                keyHeatMap[key]++;
            }

            if (currentPosition < practiceText.Length)
            {
                bool isCorrect = key == practiceText[currentPosition];

                totalKeysPressed++;

                if (isCorrect)
                {
                    correctKeysPressed++;
                }

                CalculateAccuracy();

                score = correctKeysPressed;

                typedText += key;
                currentPosition++;

                if (currentPosition >= practiceText.Length)
                {
                    isCompleted = true;

                    UpdateAccuracyStatus();
                }

                StateHasChanged();
            }
        }
    }

    private void CalculateAccuracy()
    {
        if (totalKeysPressed > 0)
        {
            accuracy = (int)Math.Round((double)correctKeysPressed / totalKeysPressed * 100);
        }
        else
        {
            accuracy = 0;
        }
    }

    private void UpdateAccuracyStatus()
    {
        if (accuracy >= 98)
        {
            accuracyStatus = "Perfect! Amazing accuracy.";
        }
        else if (accuracy >= 95)
        {
            accuracyStatus = "Excellent accuracy streak!";
        }
        else if (accuracy >= 90)
        {
            accuracyStatus = "Great accuracy, keep it up!";
        }
        else if (accuracy >= 80)
        {
            accuracyStatus = "Good accuracy, try to improve.";
        }
        else if (accuracy >= 70)
        {
            accuracyStatus = "Decent accuracy, focus on precision.";
        }
        else
        {
            accuracyStatus = "Try to type more carefully.";
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        pressedKeys.Remove(e.Key);
        StateHasChanged();
    }

    private void HandleFocus()
    {
        isFocused = true;
    }

    private void HandleBlur()
    {
        isFocused = false;
    }

    private void StartPractice()
    {
        isPracticeActive = true;
        startTime = DateTime.Now;
        practiceTimer.Start();
    }

    private void RestartPractice()
    {
        isPracticeActive = false;
        practiceTimer.Stop();

        wpm = 0;
        rawWpm = 0;
        accuracy = 0;
        score = 0;
        totalKeysPressed = 0;
        correctKeysPressed = 0;

        foreach (var key in allKeys)
        {
            keyHeatMap[key] = 0;
        }

        typedText = "";
        currentPosition = 0;
        isCompleted = false;

        accuracyStatus = "No accuracy streaks.";

        GeneratePracticeWords();

        StateHasChanged();
    }

    private void NextPractice()
    {
        int currentIndex = Array.IndexOf(allKeys, currentKey);
        currentIndex = (currentIndex + 1) % allKeys.Length;
        currentKey = allKeys[currentIndex];
        highlightedKey = currentKey;

        GeneratePracticeWords();

        RestartPractice();
    }

    private void PreviousPractice()
    {
        int currentIndex = Array.IndexOf(allKeys, currentKey);
        currentIndex = (currentIndex - 1 + allKeys.Length) % allKeys.Length;
        currentKey = allKeys[currentIndex];
        highlightedKey = currentKey;

        GeneratePracticeWords();

        RestartPractice();
    }

    private void GeneratePracticeWords()
    {
        if (keyPracticeWords.ContainsKey(currentKey))
        {
            var wordsList = new List<string>(keyPracticeWords[currentKey]);

            practiceWords = ShuffleList(wordsList);

            UpdateKeyStatus();
        }
        else
        {
            practiceWords = new List<string>();
            for (int i = 0; i < 10; i++)
            {
                string word = "";
                for (int j = 0; j < 4; j++)
                {
                    word += allKeys[random.Next(allKeys.Length)];
                }
                word = word.Insert(random.Next(word.Length), currentKey.ToString());
                practiceWords.Add(word);
            }
        }

        practiceText = string.Join(" ", practiceWords);
        typedText = "";
        currentPosition = 0;
        isCompleted = false;
    }

    private List<T> ShuffleList<T>(List<T> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = random.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
        return list;
    }

    private void UpdateKeyStatus()
    {
        switch (currentKey)
        {
            case 'e':
                currentKeyStatus = "Most common letter in English.";
                break;
            case 'n':
                currentKeyStatus = "Common consonant, focus on rhythm.";
                break;
            case 'i':
                currentKeyStatus = "Common vowel, keep fingers light.";
                break;
            case 'a':
                currentKeyStatus = "Basic vowel, practice accuracy.";
                break;
            case 'r':
                currentKeyStatus = "Common consonant, maintain posture.";
                break;
            case 'l':
                currentKeyStatus = "Practice with right pinky finger.";
                break;
            case 't':
                currentKeyStatus = "Index finger practice, stay relaxed.";
                break;
            case 'o':
                currentKeyStatus = "Round vowel, maintain rhythm.";
                break;
            case 's':
                currentKeyStatus = "Common initial consonant.";
                break;
            case 'u':
                currentKeyStatus = "Vowel for right hand practice.";
                break;
            case 'd':
                currentKeyStatus = "Middle finger exercise.";
                break;
            case 'y':
                currentKeyStatus = "Both vowel and consonant uses.";
                break;
            case 'c':
                currentKeyStatus = "Left hand middle finger practice.";
                break;
            case 'g':
                currentKeyStatus = "Left hand index finger stretch.";
                break;
            case 'h':
                currentKeyStatus = "Right hand index finger practice.";
                break;
            case 'p':
                currentKeyStatus = "Right hand pinky stretch.";
                break;
            case 'k':
                currentKeyStatus = "Middle finger right hand practice.";
                break;
            case 'b':
                currentKeyStatus = "Left hand index finger practice.";
                break;
            case 'm':
                currentKeyStatus = "Right hand index finger practice.";
                break;
            case 'f':
                currentKeyStatus = "Left hand index finger practice.";
                break;
            case 'z':
                currentKeyStatus = "Least common English letter.";
                break;
            case 'v':
                currentKeyStatus = "Left hand index finger stretch.";
                break;
            case 'x':
                currentKeyStatus = "Rare letter, left ring finger.";
                break;
            case 'q':
                currentKeyStatus = "Always followed by 'u' in English.";
                break;
            case 'j':
                currentKeyStatus = "Right hand index finger stretch.";
                break;
            default:
                currentKeyStatus = "Practice this key carefully.";
                break;
        }
    }

    private string GetKeyClass(char key)
    {
        List<string> classes = new List<string>();

        if (pressedKeys.Contains(key.ToString()))
        {
            classes.Add("pressed");
        }

        if (keyHeatMap.ContainsKey(key))
        {
            int heat = keyHeatMap[key];
            if (heat > 20) classes.Add("heat-high");
            else if (heat > 10) classes.Add("heat-medium");
            else if (heat > 0) classes.Add("heat-low");
        }

        if (key == highlightedKey)
        {
            classes.Add("highlighted");
        }

        return string.Join(" ", classes);
    }

    private async Task ToggleFullscreen()
    {
        try
        {
            bool functionExists = await JSRuntime.InvokeAsync<bool>("eval", @"
            typeof window.keyboardInterop !== 'undefined' &&
            typeof window.keyboardInterop.toggleFullscreen === 'function'
        ");

            if (functionExists)
            {
                await JSRuntime.InvokeVoidAsync("keyboardInterop.toggleFullscreen");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                if (!document.fullscreenElement) {
                    document.documentElement.requestFullscreen().catch((err) => {
                        console.error(`Error attempting to enable fullscreen: ${err.message}`);
                    });
                } else {
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    }
                }
            ");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling fullscreen: {ex.Message}");
        }
    }

    private void OpenSettings()
    {
        showSettings = true;
    }

    private void CloseSettings()
    {
        showSettings = false;
    }

    private void SaveSettings()
    {
        showSettings = false;
    }

    private void ShowHelp()
    {
        showHelp = true;
    }

    private void CloseHelp()
    {
        showHelp = false;
    }

    private async Task FocusTypingArea()
    {
        try
        {
            bool functionExists = await JSRuntime.InvokeAsync<bool>("eval", @"
            typeof window.keyboardInterop !== 'undefined' &&
            typeof window.keyboardInterop.focusTypingArea === 'function'
        ");

            if (functionExists)
            {
                await JSRuntime.InvokeVoidAsync("keyboardInterop.focusTypingArea", "typing-area");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                const element = document.getElementById('typing-area');
                if (element) {
                    element.focus();
                }
            ");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error focusing typing area: {ex.Message}");
        }
    }

    public void Dispose()
    {
        practiceTimer?.Dispose();
    }
}
