@page "/admin"
@using keyraces.Core.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject ITextSnippetRepository TextSnippetRepository

<div class="admin-container">
    <div class="card">
        <div class="card-header">
            <h3>Панель администратора</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <h4>Управление пользователями</h4>
                        </div>
                        <div class="card-body">
                            <p>Управление пользователями и ролями в системе.</p>
                            <a href="/admin/users" class="btn btn-primary">Перейти</a>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <h4>Управление текстами</h4>
                        </div>
                        <div class="card-body">
                            <p>Управление текстами для тренировки печати.</p>
                            <div class="alert alert-warning">
                                <strong>Внимание!</strong> Следующие действия удалят все тексты из базы данных. Это действие нельзя отменить.
                            </div>
                            <button class="btn btn-danger" @onclick="ShowConfirmClearDialog">
                                Очистить все тексты
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <h4>Статистика базы данных</h4>
                @if (isLoading)
                {
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Загрузка...</span>
                        </div>
                        <span>Загрузка статистики...</span>
                    </div>
                }
                else
                {
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-title">Всего текстов</div>
                            <div class="stat-value">@statistics.TotalTexts</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">Русских текстов</div>
                            <div class="stat-value">@statistics.RussianTexts</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">Английских текстов</div>
                            <div class="stat-value">@statistics.EnglishTexts</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">Легких текстов</div>
                            <div class="stat-value">@statistics.EasyTexts</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">Средних текстов</div>
                            <div class="stat-value">@statistics.MediumTexts</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">Сложных текстов</div>
                            <div class="stat-value">@statistics.HardTexts</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (showConfirmDialog)
    {
        <div class="confirmation-dialog">
            <div class="confirmation-dialog-content">
                <h4>Подтвердите действие</h4>
                <p>Вы уверены, что хотите удалить <strong>ВСЕ тексты</strong> из базы данных?</p>
                <p>Это действие нельзя отменить.</p>
                <div class="d-flex justify-content-end gap-2">
                    <button class="btn btn-secondary" @onclick="() => showConfirmDialog = false">Отмена</button>
                    <button class="btn btn-danger" @onclick="ClearAllTexts">
                        @if (isClearing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Удаление...</span>
                        }
                        else
                        {
                            <span>Да, удалить все</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private bool showConfirmDialog = false;
    private bool isClearing = false;
    private TextStatistics statistics = new();
    private bool firstRender = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadStatisticsData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.firstRender = false;
        }
    }

    private async Task LoadStatisticsData()
    {
        try
        {
            isLoading = true;

            var texts = await TextSnippetRepository.GetAllAsync();
            var textsList = texts.ToList();

            statistics = new TextStatistics
            {
                TotalTexts = textsList.Count,
                RussianTexts = textsList.Count(t => t.Language == "ru"),
                EnglishTexts = textsList.Count(t => t.Language == "en"),
                EasyTexts = textsList.Count(t => t.Difficulty == "easy"),
                MediumTexts = textsList.Count(t => t.Difficulty == "medium"),
                HardTexts = textsList.Count(t => t.Difficulty == "hard")
            };
        }
        catch
        {
            statistics = new TextStatistics();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowConfirmClearDialog()
    {
        showConfirmDialog = true;
    }

    private async Task ClearAllTexts()
    {
        try
        {
            isClearing = true;
            StateHasChanged();

            await TextSnippetRepository.ClearAllAsync();

            showConfirmDialog = false;

            await JS.InvokeVoidAsync("alert", "Все тексты успешно удалены из базы данных");

            await LoadStatisticsData();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error clearing texts: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Ошибка при удалении текстов: {ex.Message}");
        }
        finally
        {
            isClearing = false;
            StateHasChanged();
        }
    }

    private class TextStatistics
    {
        public int TotalTexts { get; set; }
        public int RussianTexts { get; set; }
        public int EnglishTexts { get; set; }
        public int EasyTexts { get; set; }
        public int MediumTexts { get; set; }
        public int HardTexts { get; set; }
    }
}
