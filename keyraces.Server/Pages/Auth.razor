@page "/login"
@page "/register"
@using System.Text.Json
@using System.Collections.Generic
@using keyraces.Server.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <img src="/images/logo.png" alt="KeyRaces Logo" class="auth-logo" />
            <h2>Welcome to KeyRaces</h2>
            <p>Improve your typing skills and compete with others</p>
        </div>

        <div class="tabs">
            <button class="tab-button @(activeTab == "login" ? "active" : "")" @onclick="NavigateToLogin">Login</button>
            <button class="tab-button @(activeTab == "register" ? "active" : "")" @onclick="NavigateToRegister">Register</button>
        </div>

        @if (activeTab == "login")
        {
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="auth-form">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="loginModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="auth-error">@errorMessage</div>
                }

                <button type="submit" class="auth-button" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Processing...</span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
            </EditForm>
        }
        else
        {
            <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="auth-form">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="registerModel.Name" class="form-control" />
                    <ValidationMessage For="@(() => registerModel.Name)" />
                </div>

                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="registerModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>

                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="registerModel.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="auth-error">@errorMessage</div>
                }

                <button type="submit" class="auth-button" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Processing...</span>
                    }
                    else
                    {
                        <span>Register</span>
                    }
                </button>
            </EditForm>
        }
    </div>
</div>

@code {
    private LoginDto loginModel = new();
    private RegisterDto registerModel = new();
    private bool isProcessing = false;
    private string errorMessage = string.Empty;
    private string activeTab = "login";
    private string returnUrl;

    protected override void OnInitialized()
    {
        if (Nav.Uri.EndsWith("/register"))
        {
            activeTab = "register";
        }
        else
        {
            activeTab = "login";
        }

        var uri = new Uri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        returnUrl = query["returnUrl"] ?? "/";
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthAndRedirect();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthAndRedirect();
        }
    }

    private async Task CheckAuthAndRedirect()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "auth_token");

            if (!string.IsNullOrEmpty(token))
            {
                var isExpired = await JS.InvokeAsync<bool>("authInterop.isTokenExpired");

                if (!isExpired)
                {
                    Console.WriteLine("User is already authenticated, redirecting to: " + returnUrl);
                    Nav.NavigateTo(returnUrl, false);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking authentication: {ex.Message}");
        }
    }

    private void NavigateToLogin()
    {
        activeTab = "login";
        Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(returnUrl)}", false);
        errorMessage = string.Empty;
    }

    private void NavigateToRegister()
    {
        activeTab = "register";
        Nav.NavigateTo($"/register?returnUrl={Uri.EscapeDataString(returnUrl)}", false);
        errorMessage = string.Empty;
    }

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine("Login attempt with email: " + loginModel.Email);
            isProcessing = true;
            errorMessage = string.Empty;

            var result = await JS.InvokeAsync<object>(
                "authInterop.login",
                loginModel.Email,
                loginModel.Password
            );

            var resultDict = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(
                JsonSerializer.Serialize(result)
            );

            if (resultDict != null && resultDict.ContainsKey("success") &&
                resultDict["success"].ValueKind == JsonValueKind.True)
            {
                Console.WriteLine("Login successful, redirecting to: " + returnUrl);
                Nav.NavigateTo(returnUrl, forceLoad: true);
            }
            else
            {
                string message = "Invalid email or password. Please try again.";
                if (resultDict != null && resultDict.ContainsKey("message"))
                {
                    message = resultDict["message"].GetString() ?? message;
                }

                Console.WriteLine("Login failed: " + message);
                errorMessage = message;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception during login: " + ex.Message);
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            Console.WriteLine("Register attempt with email: " + registerModel.Email);
            isProcessing = true;
            errorMessage = string.Empty;

            var result = await JS.InvokeAsync<object>(
                "authInterop.register",
                registerModel.Name,
                registerModel.Email,
                registerModel.Password
            );

            var resultDict = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(
                JsonSerializer.Serialize(result)
            );

            if (resultDict != null && resultDict.ContainsKey("success") &&
                resultDict["success"].ValueKind == JsonValueKind.True)
            {
                Console.WriteLine("Registration successful, redirecting to: " + returnUrl);
                Nav.NavigateTo(returnUrl, forceLoad: true);
            }
            else
            {
                string message = "Registration failed. Please check your information and try again.";
                if (resultDict != null && resultDict.ContainsKey("message"))
                {
                    message = resultDict["message"].GetString() ?? message;
                }

                Console.WriteLine("Registration failed: " + message);
                errorMessage = message;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception during registration: " + ex.Message);
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}
