@page "/admin/setup"
@using System.Net.Http.Json
@using keyraces.Server.Dtos
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav

<div class="setup-container">
    <div class="card">
        <div class="card-header">
            <h3>Настройка администратора</h3>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Загрузка...</span>
                    </div>
                </div>
            }
            else if (adminExists)
            {
                <div class="alert alert-info">
                    <h4>Администратор уже настроен</h4>
                    <p>В системе уже есть @adminCount администратор(ов).</p>
                    <p>Если вам нужно добавить нового администратора, войдите в систему с существующей учетной записью администратора и используйте страницу управления пользователями.</p>
                    <div class="mt-3">
                        <a href="/login" class="btn btn-primary">Войти</a>
                        <a href="/" class="btn btn-outline-secondary ms-2">На главную</a>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning mb-4">
                    <h4>Первоначальная настройка</h4>
                    <p>Эта страница предназначена для первоначальной настройки администратора системы. После создания первого администратора, эта страница будет недоступна.</p>
                </div>

                <EditForm Model="@setupModel" OnValidSubmit="ConfigureAdmin" class="setup-form">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="adminEmail" class="form-label">Email администратора</label>
                        <InputText id="adminEmail" @bind-Value="setupModel.AdminEmail" class="form-control" />
                        <div class="form-text">Укажите email существующего пользователя, которого нужно сделать администратором</div>
                        <ValidationMessage For="@(() => setupModel.AdminEmail)" />
                    </div>

                    <div class="mb-3">
                        <label for="secretKey" class="form-label">Секретный ключ</label>
                        <InputText id="secretKey" @bind-Value="setupModel.SecretKey" type="password" class="form-control" />
                        <div class="form-text">Введите секретный ключ для настройки администратора</div>
                        <ValidationMessage For="@(() => setupModel.SecretKey)" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Настройка...</span>
                        }
                        else
                        {
                            <span>Настроить администратора</span>
                        }
                    </button>
                </EditForm>
            }
        </div>
    </div>
</div>

<style>
    .setup-container {
        max-width: 600px;
        margin: 40px auto;
        padding: 20px;
    }

    .setup-form {
        max-width: 400px;
    }
</style>

@code {
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool adminExists = false;
    private int adminCount = 0;
    private string errorMessage = "";
    private SetupAdminDto setupModel = new SetupAdminDto();
    private bool firstRender = true;

    protected override async Task OnInitializedAsync()
    {
        await CheckAdminStatusData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.firstRender = false;
        }
    }

    private async Task CheckAdminStatusData()
    {
        try
        {
            var response = await Http.GetAsync("/api/Role/check-admin");

            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();

                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var jsonDoc = JsonDocument.Parse(jsonString);
                var root = jsonDoc.RootElement;

                if (root.TryGetProperty("adminExists", out var adminExistsElement))
                {
                    adminExists = adminExistsElement.GetBoolean();
                }

                if (root.TryGetProperty("adminCount", out var adminCountElement))
                {
                    adminCount = adminCountElement.GetInt32();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Ошибка при проверке статуса администратора: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ConfigureAdmin()
    {
        if (string.IsNullOrWhiteSpace(setupModel.AdminEmail) || string.IsNullOrWhiteSpace(setupModel.SecretKey))
        {
            errorMessage = "Заполните все поля";
            return;
        }

        try
        {
            isSubmitting = true;
            errorMessage = "";
            StateHasChanged();

            var response = await Http.PostAsJsonAsync("/api/Role/setup-admin", setupModel);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Администратор успешно настроен");
                Nav.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Ошибка при настройке администратора: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка: {ex.Message}";
            await JS.InvokeVoidAsync("console.error", "Error configuring admin:", ex.Message);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}
